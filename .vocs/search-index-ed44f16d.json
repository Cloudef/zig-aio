{"documentCount":54,"nextId":54,"documentIds":{"0":"pages/aio-dynamic.mdx#aio-api","1":"pages/aio-dynamic.mdx#dynamic-io","2":"pages/aio-dynamic.mdx#initializing-dynamic-instance","3":"pages/aio-dynamic.mdx#queuing-operations","4":"pages/aio-dynamic.mdx#completing-operations","5":"pages/aio-immediate.mdx#aio-api","6":"pages/aio-immediate.mdx#immediate-io","7":"pages/aio-immediate.mdx#perform-a-single-operation","8":"pages/aio-immediate.mdx#perform-multiple-operations","9":"pages/aio-immediate.mdx#using-multi","10":"pages/aio-immediate.mdx#using-batch","11":"pages/aio-operations.mdx#aio-api","12":"pages/aio-operations.mdx#operations","13":"pages/aio-operations.mdx#common-fields","14":"pages/aio-operations.mdx#fsync","15":"pages/aio-operations.mdx#read","16":"pages/aio-operations.mdx#write","17":"pages/aio-operations.mdx#accept","18":"pages/aio-operations.mdx#connect","19":"pages/aio-operations.mdx#recv","20":"pages/aio-operations.mdx#send","21":"pages/aio-operations.mdx#openat","22":"pages/aio-operations.mdx#close","23":"pages/aio-operations.mdx#timeout","24":"pages/aio-operations.mdx#timeoutremove","25":"pages/aio-operations.mdx#linktimeout","26":"pages/aio-operations.mdx#cancel","27":"pages/aio-operations.mdx#renameat","28":"pages/aio-operations.mdx#unlinkat","29":"pages/aio-operations.mdx#mkdirat","30":"pages/aio-operations.mdx#symlinkat","31":"pages/aio-operations.mdx#socket","32":"pages/aio-operations.mdx#closesocket","33":"pages/coro-context-switches.mdx#coro-api","34":"pages/coro-context-switches.mdx#paired-context-switches","35":"pages/coro-context-switches.mdx#canceling-io","36":"pages/coro-context-switches.mdx#unpaired-wakeup","37":"pages/coro-io.mdx#coro-api","38":"pages/coro-io.mdx#io","39":"pages/coro-io.mdx#performing-io-operations","40":"pages/coro-io.mdx#cancellations","41":"pages/coro-scheduler.mdx#coro-api","42":"pages/coro-scheduler.mdx#scheduler","43":"pages/coro-scheduler.mdx#initializing-scheduler-instance","44":"pages/coro-scheduler.mdx#spawning-tasks","45":"pages/coro-scheduler.mdx#reaping-tasks","46":"pages/coro-scheduler.mdx#running","47":"pages/#overview","48":"pages/#features","49":"pages/integration.mdx#integrating-zig-aio","50":"pages/integration.mdx#zig-package-manager","51":"pages/integration.mdx#fetching-and-updating-the-zig-aio-dependency","52":"pages/integration.mdx#using-zig-aio-modules-in-zig-project","53":"pages/integration.mdx#using-zig-aio-in-zig-code"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[2,1,1],"1":[2,2,19],"2":[3,4,42],"3":[2,4,38],"4":[2,4,51],"5":[2,1,1],"6":[2,2,13],"7":[4,4,31],"8":[3,4,10],"9":[2,7,61],"10":[2,7,92],"11":[2,1,1],"12":[1,2,8],"13":[2,3,79],"14":[1,3,19],"15":[1,3,35],"16":[1,3,37],"17":[1,3,23],"18":[1,3,20],"19":[1,3,21],"20":[1,3,22],"21":[1,3,35],"22":[1,3,14],"23":[1,3,26],"24":[1,3,17],"25":[1,3,39],"26":[1,3,16],"27":[1,3,22],"28":[1,3,25],"29":[1,3,33],"30":[1,3,26],"31":[1,3,23],"32":[1,3,14],"33":[2,1,10],"34":[3,2,54],"35":[2,2,36],"36":[2,2,29],"37":[2,1,1],"38":[1,2,71],"39":[3,3,163],"40":[1,3,42],"41":[2,1,1],"42":[1,2,33],"43":[3,3,27],"44":[2,3,85],"45":[2,3,42],"46":[1,3,61],"47":[1,1,59],"48":[1,1,23],"49":[3,1,1],"50":[3,3,1],"51":[7,6,18],"52":[6,6,32],"53":[5,6,16]},"averageFieldLength":[1.9074074074074074,2.925925925925926,31.83333333333334],"storedFields":{"0":{"href":"/aio-dynamic#aio-api","html":"</header>\n","isPage":true,"text":"\n","title":"AIO API","titles":[]},"1":{"href":"/aio-dynamic#dynamic-io","html":"\n<p>In case the amount of IO operations isn&#x27;t known ahead of time the dynamic api can be used.</p>\n","isPage":false,"text":"\nIn case the amount of IO operations isn&#x27;t known ahead of time the dynamic api can be used.\n","title":"Dynamic IO","titles":["AIO API"]},"2":{"href":"/aio-dynamic#initializing-dynamic-instance","html":"\n<p>Creating a Dynamic instance requires an allocator and upper bound for non-completed operations.\nThe instance allocates only during the <code>init</code>, and frees the memory during <code>deinit</code>.\nSame allocator must be used in <code>deinit</code> that was used in <code>init</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> max_operations</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> work</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Dynamic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">init</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">heap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">page_allocator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">max_operations</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">defer</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> work</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deinit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">heap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">page_allocator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nCreating a Dynamic instance requires an allocator and upper bound for non-completed operations.\nThe instance allocates only during the init, and frees the memory during deinit.\nSame allocator must be used in deinit that was used in init.\nconst max_operations = 32;\nvar work = try Dynamic.init(std.heap.page_allocator, max_operations);\ndefer work.deinit(std.heap.page_allocator);\n","title":"Initializing Dynamic instance","titles":["AIO API","Dynamic IO"]},"3":{"href":"/aio-dynamic#queuing-operations","html":"\n<p>It is possible to queue either single or multiple operations just like with the immediate api.\nThe call to queue is atomic, if the call fails, none of the operations will be actually performed.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Multiple operations</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> work</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">queue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.{</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Read</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{...},</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{...},</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Fsync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{...},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Single operation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> work</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">queue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Timeout</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{...});</span></span></code></pre>\n","isPage":false,"text":"\nIt is possible to queue either single or multiple operations just like with the immediate api.\nThe call to queue is atomic, if the call fails, none of the operations will be actually performed.\n// Multiple operations\ntry work.queue(.{\n    aio.Read{...},\n    aio.Write{...},\n    aio.Fsync{...},\n});\n \n// Single operation\ntry work.queue(aio.Timeout{...});\n","title":"Queuing operations","titles":["AIO API","Dynamic IO"]},"4":{"href":"/aio-dynamic#completing-operations","html":"\n<p>It is possible to complete the operations either in blocking or non-blocking fashion.\nThe blocking mode will wait for at least one operation to complete.\nThe non-blocking always returns immediately even if no operations were completed.\nThe call to complete returns <code>aio.CompletionResult</code> containing the number of operations that were completed\nand the number of errors that occured.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// blocks until at least 1 operation completes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> work</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">complete</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">blocking</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// returns immediately</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> work</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">complete</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">nonblocking</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>","isPage":false,"text":"\nIt is possible to complete the operations either in blocking or non-blocking fashion.\nThe blocking mode will wait for at least one operation to complete.\nThe non-blocking always returns immediately even if no operations were completed.\nThe call to complete returns aio.CompletionResult containing the number of operations that were completed\nand the number of errors that occured.\n// blocks until at least 1 operation completes\nconst res = try work.complete(.blocking);\n// returns immediately\nconst res = try work.complete(.nonblocking);","title":"Completing operations","titles":["AIO API","Dynamic IO"]},"5":{"href":"/aio-immediate#aio-api","html":"</header>\n","isPage":true,"text":"\n","title":"AIO API","titles":[]},"6":{"href":"/aio-immediate#immediate-io","html":"\n<p>For immediate blocking IO, <code>zig-aio</code> provides the following functions in the <code>aio</code> module.</p>\n","isPage":false,"text":"\nFor immediate blocking IO, zig-aio provides the following functions in the aio module.\n","title":"Immediate IO","titles":["AIO API"]},"7":{"href":"/aio-immediate#perform-a-single-operation","html":"\n<p>Completes a single operation, the call blocks until it&#x27;s complete.\nReturns error of the operation if the operation failed.\nReturns <code>void</code> if there was no error.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">single</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">file</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;contents&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span></code></pre>\n","isPage":false,"text":"\nCompletes a single operation, the call blocks until it&#x27;s complete.\nReturns error of the operation if the operation failed.\nReturns void if there was no error.\ntry aio.single(aio.Write{.file = f, .buffer = &quot;contents&quot;});\n","title":"Perform a single operation","titles":["AIO API","Immediate IO"]},"8":{"href":"/aio-immediate#perform-multiple-operations","html":"\n<p><code>zig-aio</code> provides two methods for batching IO operations.</p>\n","isPage":false,"text":"\nzig-aio provides two methods for batching IO operations.\n","title":"Perform multiple operations","titles":["AIO API","Immediate IO"]},"9":{"href":"/aio-immediate#using-multi","html":"\n<p>Completes a list of operations immediately, blocks until complete\nReturns <code>error.SomeOperationFailed</code> if any operation failed\nReturns <code>void</code> if there were no errors.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> my_buffer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1024</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u8</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> my_len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">usize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">multi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.{</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">file</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;contents&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">link_next</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">},</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Read</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">file</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">my_buffer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_read</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">my_len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span></code></pre>\n<p>The <code>.link_next</code> field of operation can be used to link the operation to the next operation.\nWhen linking operations, the next operation won&#x27;t start until this operation is complete.</p>\n","isPage":false,"text":"\nCompletes a list of operations immediately, blocks until complete\nReturns error.SomeOperationFailed if any operation failed\nReturns void if there were no errors.\nvar my_buffer: [1024]u8 = undefined;\nvar my_len: usize = undefined;\n \ntry aio.multi(.{\n    aio.Write{.file = f, .buffer = &quot;contents&quot;, .link_next = true},\n    aio.Read{.file = f, .buffer = &amp;my_buffer, .out_read = &amp;my_len},\n});\nThe .link_next field of operation can be used to link the operation to the next operation.\nWhen linking operations, the next operation won&#x27;t start until this operation is complete.\n","title":"Using multi","titles":["AIO API","Immediate IO","Perform multiple operations"]},"10":{"href":"/aio-immediate#using-batch","html":"\n<p>Batch is similar to multi, but it will not return <code>error.SomeOperationFailed</code> in case any of the operations fail.\nInstead batch returns <code>aio.CompletionResult</code> which contains the number of operations that was completed, and number of\nerrors that occured. To find out which operations failed, errors have to be stored somewhere by setting the <code>.out_error</code>\nfield of the operation. The batch call may still fail in implementation defined ways, such as running out of system resources.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> my_buffer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1024</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u8</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> my_len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">usize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> write_error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">WriteError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> read_error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ReadError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">batch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.{</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">file</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;contents&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_error</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">write_error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">link_next</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">},</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Read</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">file</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">my_buffer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_error</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">read_error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_read</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">my_len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">res</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">num_errors</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">write_error</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Success</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">@panic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;write failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">read_error</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Success</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">@panic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;read failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nBatch is similar to multi, but it will not return error.SomeOperationFailed in case any of the operations fail.\nInstead batch returns aio.CompletionResult which contains the number of operations that was completed, and number of\nerrors that occured. To find out which operations failed, errors have to be stored somewhere by setting the .out_error\nfield of the operation. The batch call may still fail in implementation defined ways, such as running out of system resources.\nvar my_buffer: [1024]u8 = undefined;\nvar my_len: usize = undefined;\nvar write_error: std.posix.WriteError = undefined;\nvar read_error: std.posix.ReadError = undefined;\n \nconst res = try aio.batch(.{\n    aio.Write{.file = f, .buffer = &quot;contents&quot;, .out_error = &amp;write_error, .link_next = true},\n    aio.Read{.file = f, .buffer = &amp;my_buffer, .out_error = &amp;read_error, .out_read = &amp;my_len},\n});\n \nif (res.num_errors &gt; 0) {\n    if (write_error != error.Success) @panic(&quot;write failed&quot;);\n    if (read_error != error.Success) @panic(&quot;read failed&quot;);\n}","title":"Using batch","titles":["AIO API","Immediate IO","Perform multiple operations"]},"11":{"href":"/aio-operations#aio-api","html":"</header>\n","isPage":true,"text":"\n","title":"AIO API","titles":[]},"12":{"href":"/aio-operations#operations","html":"\n<p>A handful of IO operations are supported.</p>\n","isPage":false,"text":"\nA handful of IO operations are supported.\n","title":"Operations","titles":["AIO API"]},"13":{"href":"/aio-operations#common-fields","html":"\n<p>Every operation supports these common fields.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Counter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> union</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">enum</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    inc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*u16</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    dec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*u16</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    nop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Id</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">E</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ||</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> SharedError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">counter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Counter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">nop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">link_next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n<p>If <code>out_id</code> is set, the id of the operation will be stored into that address.\nThe <code>id</code> can then be used in future operations to refer to this operation.\nIf <code>out_error</code> is set, the error of the operation will be stored into that address, in case the operation failed.\nIf there was no failure a <code>error.Success</code> will be stored in that address.\n<code>counter</code> can be used to set either decreasing or increasing counter.\nWhen operation completes it will either decrease or increase the <code>u16</code> stored at the address.\n<code>link_next</code> can be used to link the next operation into this operation.\nWhen operations are linked, the next operation won&#x27;t start until this operation has completed first.</p>\n","isPage":false,"text":"\nEvery operation supports these common fields.\nconst Counter = union(enum) {\n    inc: *u16,\n    dec: *u16,\n    nop: void,\n};\n \nout_id: ?*Id = null,\nout_error: ?*(E || SharedError) = null,\ncounter: Counter = .nop,\nlink_next: bool = false,\nIf out_id is set, the id of the operation will be stored into that address.\nThe id can then be used in future operations to refer to this operation.\nIf out_error is set, the error of the operation will be stored into that address, in case the operation failed.\nIf there was no failure a error.Success will be stored in that address.\ncounter can be used to set either decreasing or increasing counter.\nWhen operation completes it will either decrease or increase the u16 stored at the address.\nlink_next can be used to link the next operation into this operation.\nWhen operations are linked, the next operation won&#x27;t start until this operation has completed first.\n","title":"Common fields","titles":["AIO API","Operations"]},"14":{"href":"/aio-operations#fsync","html":"\n<p>Synchronizes the contents of a <code>file</code> onto the disk.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Fsync</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Define</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    file</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">File</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">File</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SyncError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nSynchronizes the contents of a file onto the disk.\npub const Fsync = Define(struct {\n    file: std.fs.File,\n}, std.fs.File.SyncError);\n","title":"Fsync","titles":["AIO API","Operations"]},"15":{"href":"/aio-operations#read","html":"\n<p>Reads a <code>file</code> into a <code>buffer</code> from a <code>offset</code>.\nThe amount of bytes read is stored in the location pointed by <code>out_read</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Read</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Define</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    file</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">File</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    buffer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    offset</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u64</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    out_read</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*usize</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">File</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ReadError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nReads a file into a buffer from a offset.\nThe amount of bytes read is stored in the location pointed by out_read.\npub const Read = Define(struct {\n    file: std.fs.File,\n    buffer: []u8,\n    offset: u64 = 0,\n    out_read: *usize,\n}, std.fs.File.ReadError);\n","title":"Read","titles":["AIO API","Operations"]},"16":{"href":"/aio-operations#write","html":"\n<p>Writes contents of <code>buffer</code> from <code>offset</code> into a <code>file</code>.\nThe amount of bytes written is stored in the location pointed by <code>out_written</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Write</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Define</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    file</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">File</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    buffer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    offset</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u64</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    out_written</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?*usize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">File</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">WriteError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nWrites contents of buffer from offset into a file.\nThe amount of bytes written is stored in the location pointed by out_written.\npub const Write = Define(struct {\n    file: std.fs.File,\n    buffer: []const u8,\n    offset: u64 = 0,\n    out_written: ?*usize = null,\n}, std.fs.File.WriteError);\n","title":"Write","titles":["AIO API","Operations"]},"17":{"href":"/aio-operations#accept","html":"\n<p>See <code>man accept(2)</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Accept</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Define</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    addr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">sockaddr</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    inout_addrlen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socklen_t</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    out_socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">AcceptError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nSee man accept(2)\npub const Accept = Define(struct {\n    socket: std.posix.socket_t,\n    addr: ?*sockaddr = null,\n    inout_addrlen: ?*std.posix.socklen_t = null,\n    out_socket: *std.posix.socket_t,\n}, std.posix.AcceptError);\n","title":"Accept","titles":["AIO API","Operations"]},"18":{"href":"/aio-operations#connect","html":"\n<p>See <code>man connect(2)</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Connect</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Define</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    addr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> sockaddr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    addrlen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socklen_t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ConnectError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nSee man connect(2)\npub const Connect = Define(struct {\n    socket: std.posix.socket_t,\n    addr: *const sockaddr,\n    addrlen: std.posix.socklen_t,\n}, std.posix.ConnectError);\n","title":"Connect","titles":["AIO API","Operations"]},"19":{"href":"/aio-operations#recv","html":"\n<p>See <code>man recv(2)</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Recv</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Define</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    buffer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    out_read</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*usize</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">RecvFromError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nSee man recv(2)\npub const Recv = Define(struct {\n    socket: std.posix.socket_t,\n    buffer: []u8,\n    out_read: *usize,\n}, std.posix.RecvFromError);\n","title":"Recv","titles":["AIO API","Operations"]},"20":{"href":"/aio-operations#send","html":"\n<p>See <code>man send(2)</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Send</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Define</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    buffer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    out_written</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?*usize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SendError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nSee man send(2)\npub const Send = Define(struct {\n    socket: std.posix.socket_t,\n    buffer: []const u8,\n    out_written: ?*usize = null,\n}, std.posix.SendError);\n","title":"Send","titles":["AIO API","Operations"]},"21":{"href":"/aio-operations#openat","html":"\n<p>Opens <code>path</code> relative to a <code>dir</code>, opening is customized by <code>flags</code>.\nThe opened file is stored into the location pointed by <code>out_file</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> OpenAt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Define</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    path</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    flags</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">File</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">OpenFlags</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    out_file</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">File</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">File</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">OpenError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nOpens path relative to a dir, opening is customized by flags.\nThe opened file is stored into the location pointed by out_file.\npub const OpenAt = Define(struct {\n    dir: std.fs.Dir,\n    path: [*:0]const u8,\n    flags: std.fs.File.OpenFlags,\n    out_file: *std.fs.File,\n}, std.fs.File.OpenError);\n","title":"OpenAt","titles":["AIO API","Operations"]},"22":{"href":"/aio-operations#close","html":"\n<p>Closes a <code>file</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Close</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Define</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    file</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">File</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{});</span></span></code></pre>\n","isPage":false,"text":"\nCloses a file.\npub const Close = Define(struct {\n    file: std.fs.File,\n}, error{});\n","title":"Close","titles":["AIO API","Operations"]},"23":{"href":"/aio-operations#timeout","html":"\n<p>Starts a timeout. Once the timeout expires the operation completes.\nThe timeout uses a monotnic clock source.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Timeout</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Define</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    ts</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">sec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">i64</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">nsec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">i64</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{});</span></span></code></pre>\n","isPage":false,"text":"\nStarts a timeout. Once the timeout expires the operation completes.\nThe timeout uses a monotnic clock source.\npub const Timeout = Define(struct {\n    ts: struct { sec: i64 = 0, nsec: i64 = 0 },\n}, error{});\n","title":"Timeout","titles":["AIO API","Operations"]},"24":{"href":"/aio-operations#timeoutremove","html":"\n<p>Cancel existing timeout referenced by <code>id</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> TimeoutRemove</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Define</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">InProgress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">NotFound</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> });</span></span></code></pre>\n","isPage":false,"text":"\nCancel existing timeout referenced by id.\npub const TimeoutRemove = Define(struct {\n    id: Id,\n}, error{ InProgress, NotFound });\n","title":"TimeoutRemove","titles":["AIO API","Operations"]},"25":{"href":"/aio-operations#linktimeout","html":"\n<p>Timeout linked to a operation.\nThe operation before must have set <code>link_next</code> to <code>true</code>.\nIf the operation finishes before the timeout, then the timeout will be canceled.\nIf the timeout finishes before the operation, then the operation will be canceled.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> LinkTimeout</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Define</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    ts</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">sec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">i64</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">nsec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">i64</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    out_expired</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?*bool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">InProgress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span></code></pre>\n","isPage":false,"text":"\nTimeout linked to a operation.\nThe operation before must have set link_next to true.\nIf the operation finishes before the timeout, then the timeout will be canceled.\nIf the timeout finishes before the operation, then the operation will be canceled.\npub const LinkTimeout = Define(struct {\n    ts: struct { sec: i64 = 0, nsec: i64 = 0 },\n    out_expired: ?*bool = null,\n}, error{InProgress});\n","title":"LinkTimeout","titles":["AIO API","Operations"]},"26":{"href":"/aio-operations#cancel","html":"\n<p>Cancel existing operation referenced by <code>id</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Cancel</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Define</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">InProgress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">NotFound</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> });</span></span></code></pre>\n","isPage":false,"text":"\nCancel existing operation referenced by id.\npub const Cancel = Define(struct {\n    id: Id,\n}, error{ InProgress, NotFound });\n","title":"Cancel","titles":["AIO API","Operations"]},"27":{"href":"/aio-operations#renameat","html":"\n<p>Rename a <code>old_path</code> relative to <code>old_dir</code> into <code>new_path</code> relative to <code>new_dir</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> RenameAt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Define</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    old_dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    old_path</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    new_dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    new_path</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">RenameError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nRename a old_path relative to old_dir into new_path relative to new_dir.\npub const RenameAt = Define(struct {\n    old_dir: std.fs.Dir,\n    old_path: [*:0]const u8,\n    new_dir: std.fs.Dir,\n    new_path: [*:0]const u8,\n}, std.fs.Dir.RenameError);\n","title":"RenameAt","titles":["AIO API","Operations"]},"28":{"href":"/aio-operations#unlinkat","html":"\n<p>Delete a file or directory locating in <code>path</code> relative to <code>dir</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> UnlinkAt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Define</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    path</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">UnlinkatError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nDelete a file or directory locating in path relative to dir.\npub const UnlinkAt = Define(struct {\n    dir: std.fs.Dir,\n    path: [*:0]const u8,\n}, std.posix.UnlinkatError);\n","title":"UnlinkAt","titles":["AIO API","Operations"]},"29":{"href":"/aio-operations#mkdirat","html":"\n<p>Create directory relative to <code>dir</code> at <code>path</code>.\nThe <code>mode</code> parameter can specify the mode of the directory on supporting operating systems.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> MkDirAt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Define</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    path</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    mode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u32</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">default_mode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">MakeError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nCreate directory relative to dir at path.\nThe mode parameter can specify the mode of the directory on supporting operating systems.\npub const MkDirAt = Define(struct {\n    dir: std.fs.Dir,\n    path: [*:0]const u8,\n    mode: u32 = std.fs.Dir.default_mode,\n}, std.fs.Dir.MakeError);\n","title":"MkDirAt","titles":["AIO API","Operations"]},"30":{"href":"/aio-operations#symlinkat","html":"\n<p>Create a symlink relative to <code>dir</code> at <code>link_path</code> linking to the <code>target</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> SymlinkAt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Define</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    target</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    link_path</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SymLinkError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nCreate a symlink relative to dir at link_path linking to the target.\npub const SymlinkAt = Define(struct {\n    dir: std.fs.Dir,\n    target: [*:0]const u8,\n    link_path: [*:0]const u8,\n}, std.posix.SymLinkError);\n","title":"SymlinkAt","titles":["AIO API","Operations"]},"31":{"href":"/aio-operations#socket","html":"\n<p>See <code>man socket(2)</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Define</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// std.posix.AF</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    domain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// std.posix.SOCK</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    flags</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// std.posix.IPPROTO</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    protocol</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    out_socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SocketError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nSee man socket(2)\npub const Socket = Define(struct {\n    /// std.posix.AF\n    domain: u32,\n    /// std.posix.SOCK\n    flags: u32,\n    /// std.posix.IPPROTO\n    protocol: u32,\n    out_socket: *std.posix.socket_t,\n}, std.posix.SocketError);\n","title":"Socket","titles":["AIO API","Operations"]},"32":{"href":"/aio-operations#closesocket","html":"\n<p>Closes a <code>socket</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> CloseSocket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Define</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{});</span></span></code></pre>","isPage":false,"text":"\nCloses a socket.\npub const CloseSocket = Define(struct {\n    socket: std.posix.socket_t,\n}, error{});","title":"CloseSocket","titles":["AIO API","Operations"]},"33":{"href":"/coro-context-switches#coro-api","html":"</header>\n<aside data-callout=\"warning\"><p>This part of the API is likely to change.</p></aside>\n","isPage":true,"text":"\nThis part of the API is likely to change.\n","title":"CORO API","titles":[]},"34":{"href":"/coro-context-switches#paired-context-switches","html":"\n<p>To yield running task to the caller use the following.\nThe function takes a enum value as a argument representing the yield state of the task.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">yield</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SomeEnum</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>To continue running the task from where it left, you need to issue the same enum value to the following function.\nIf the task currently isn&#x27;t being yielded in the supplied state, the call is no-op.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">wakeupFromState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SomeEnum</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>This is the preferred way to handle the control flow between tasks.</p>\n","isPage":false,"text":"\nTo yield running task to the caller use the following.\nThe function takes a enum value as a argument representing the yield state of the task.\ncoro.yield(SomeEnum.value);\nTo continue running the task from where it left, you need to issue the same enum value to the following function.\nIf the task currently isn&#x27;t being yielded in the supplied state, the call is no-op.\ncoro.wakeupFromState(task, SomeEnum.value);\nThis is the preferred way to handle the control flow between tasks.\n","title":"Paired context switches","titles":["CORO API"]},"35":{"href":"/coro-context-switches#canceling-io","html":"\n<p>While it&#x27;s possible to cancel IO by using the <code>aio.Cancel</code> operations. It is also possible to cancel\nall IO operations currently blocking as task by doing the following.\nIf the task currently isn&#x27;t being yielded by IO then the call is no-op.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">wakeupFromIo</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nWhile it&#x27;s possible to cancel IO by using the aio.Cancel operations. It is also possible to cancel\nall IO operations currently blocking as task by doing the following.\nIf the task currently isn&#x27;t being yielded by IO then the call is no-op.\ncoro.wakeupFromIo(task);\n","title":"Canceling IO","titles":["CORO API"]},"36":{"href":"/coro-context-switches#unpaired-wakeup","html":"\n<p>Sometimes it&#x27;s useful to be able to wakeup the task from any yielding state.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">wakeup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>In this case the task will wake up no matter what its yielding state is currently.</p>","isPage":false,"text":"\nSometimes it&#x27;s useful to be able to wakeup the task from any yielding state.\ncoro.wakeup(task);\nIn this case the task will wake up no matter what its yielding state is currently.","title":"Unpaired wakeup","titles":["CORO API"]},"37":{"href":"/coro-io#coro-api","html":"</header>\n","isPage":true,"text":"\n","title":"CORO API","titles":[]},"38":{"href":"/coro-io#io","html":"\n<p>Inside a task it is possible to use the IO functions inside the <code>coro.io</code> namespace to perform cooperative\nIO with the <code>Scheduler</code>. When calling a <code>coro.io</code> operation from a task, the task setups some internal state,\nqueues the IO operations for <code>Scheduler</code> and then yields, allowing other code to run in the program.</p>\n<p>All the IO operations are merged into one <code>aio.Dynamic</code> instance for completition during the next scheduler tick.\nWhile this may not be beneficial on all backends, the io_uring backend allows the kernel to execute all\nthe yielding tasks IO operations with a single syscall.</p>\n","isPage":false,"text":"\nInside a task it is possible to use the IO functions inside the coro.io namespace to perform cooperative\nIO with the Scheduler. When calling a coro.io operation from a task, the task setups some internal state,\nqueues the IO operations for Scheduler and then yields, allowing other code to run in the program.\nAll the IO operations are merged into one aio.Dynamic instance for completition during the next scheduler tick.\nWhile this may not be beneficial on all backends, the io_uring backend allows the kernel to execute all\nthe yielding tasks IO operations with a single syscall.\n","title":"IO","titles":["CORO API"]},"39":{"href":"/coro-io#performing-io-operations","html":"\n<p>Performing operations is similar to <code>aio</code> module. The api is the same, but instead use the <code>coro.io</code> namespace.\nBelow is a full example of simple server / client program using the <code>coro</code> api.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> @import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;std&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> aio</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> @import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;aio&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> @import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;coro&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">scoped</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">coro_aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> aio_coro_options</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Options</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> .{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">debug</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// set to true to enable debug logs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> server</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">io</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">single</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">domain</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">AF</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">INET</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">flags</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SOCK</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">STREAM</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SOCK</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">CLOEXEC</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">protocol</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">IPPROTO</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">TCP</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">net</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">initIp4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.{ </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1327</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setsockopt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SOL</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SOCKET</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SO</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">REUSEADDR</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">mem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">@as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">c_int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setsockopt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SOL</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SOCKET</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SO</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">REUSEPORT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">mem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">@as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">c_int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">bind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getOsSockLen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">listen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">128</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> client_sock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">io</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">single</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Accept</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">client_sock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1024</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u8</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">usize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">io</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">multi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.{</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">        aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> client_sock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;hey &quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">link_next</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">        aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> client_sock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;I&#x27;m doing multiple IO ops at once &quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">link_next</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">        aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> client_sock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;how cool is that? &quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">link_next</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">        aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Recv</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> client_sock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_read</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">warn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;got reply from client: {s}&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">..</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">io</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">multi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.{</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">        aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> client_sock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;ok bye&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">link_next</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">        aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">CloseSocket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> client_sock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">link_next</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">        aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">CloseSocket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> client</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">info</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;waiting 2 secs, to give time for the server to spin up&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">io</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">single</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Timeout</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> .{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">sec</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">nsec</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">io</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">single</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">domain</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">AF</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">INET</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">flags</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SOCK</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">STREAM</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SOCK</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">CLOEXEC</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">protocol</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">IPPROTO</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">TCP</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">net</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">initIp4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.{ </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">127</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1327</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">io</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">single</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">addr</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">addrlen</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getOsSockLen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">link_next</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    while</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1024</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u8</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">usize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">io</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">single</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Recv</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_read</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> });</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">        log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">warn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;got reply from server: {s}&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">..</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">mem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">indexOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">..</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;how cool is that?&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">|</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">_</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">|</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> break</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">io</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">single</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;dude, I don&#x27;t care&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1024</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u8</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">usize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">io</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">single</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Recv</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_read</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> });</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">warn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;got final words from server: {s}&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">..</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]});</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> gpa</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">heap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">GeneralPurposeAllocator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.{}) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> .{};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> _</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> gpa</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deinit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">init</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">gpa</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">allocator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), .{});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deinit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    _</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">spawn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">server</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{}, .{});</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    _</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">spawn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">client</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{}, .{});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nPerforming operations is similar to aio module. The api is the same, but instead use the coro.io namespace.\nBelow is a full example of simple server / client program using the coro api.\nconst std = @import(&quot;std&quot;);\nconst aio = @import(&quot;aio&quot;);\nconst coro = @import(&quot;coro&quot;);\nconst log = std.log.scoped(.coro_aio);\n \npub const aio_coro_options: coro.Options = .{\n    .debug = false, // set to true to enable debug logs\n};\n \nfn server() !void {\n    var socket: std.posix.socket_t = undefined;\n    try coro.io.single(aio.Socket{\n        .domain = std.posix.AF.INET,\n        .flags = std.posix.SOCK.STREAM | std.posix.SOCK.CLOEXEC,\n        .protocol = std.posix.IPPROTO.TCP,\n        .out_socket = &amp;socket,\n    });\n \n    const address = std.net.Address.initIp4(.{ 0, 0, 0, 0 }, 1327);\n    try std.posix.setsockopt(socket, std.posix.SOL.SOCKET, std.posix.SO.REUSEADDR, &amp;std.mem.toBytes(@as(c_int, 1)));\n    try std.posix.setsockopt(socket, std.posix.SOL.SOCKET, std.posix.SO.REUSEPORT, &amp;std.mem.toBytes(@as(c_int, 1)));\n    try std.posix.bind(socket, &amp;address.any, address.getOsSockLen());\n    try std.posix.listen(socket, 128);\n \n    var client_sock: std.posix.socket_t = undefined;\n    try coro.io.single(aio.Accept{ .socket = socket, .out_socket = &amp;client_sock });\n \n    var buf: [1024]u8 = undefined;\n    var len: usize = 0;\n    try coro.io.multi(.{\n        aio.Send{ .socket = client_sock, .buffer = &quot;hey &quot;, .link_next = true },\n        aio.Send{ .socket = client_sock, .buffer = &quot;I&#x27;m doing multiple IO ops at once &quot;, .link_next = true },\n        aio.Send{ .socket = client_sock, .buffer = &quot;how cool is that? &quot;, .link_next = true },\n        aio.Recv{ .socket = client_sock, .buffer = &amp;buf, .out_read = &amp;len },\n    });\n \n    log.warn(&quot;got reply from client: {s}&quot;, .{buf[0..len]});\n    try coro.io.multi(.{\n        aio.Send{ .socket = client_sock, .buffer = &quot;ok bye&quot;, .link_next = true },\n        aio.CloseSocket{ .socket = client_sock, .link_next = true },\n        aio.CloseSocket{ .socket = socket },\n    });\n}\n \nfn client() !void {\n    log.info(&quot;waiting 2 secs, to give time for the server to spin up&quot;, .{});\n    try coro.io.single(aio.Timeout{ .ts = .{ .sec = 2, .nsec = 0 } });\n \n    var socket: std.posix.socket_t = undefined;\n    try coro.io.single(aio.Socket{\n        .domain = std.posix.AF.INET,\n        .flags = std.posix.SOCK.STREAM | std.posix.SOCK.CLOEXEC,\n        .protocol = std.posix.IPPROTO.TCP,\n        .out_socket = &amp;socket,\n    });\n \n    const address = std.net.Address.initIp4(.{ 127, 0, 0, 1 }, 1327);\n    try coro.io.single(aio.Connect{\n        .socket = socket,\n        .addr = &amp;address.any,\n        .addrlen = address.getOsSockLen(),\n        .link_next = true,\n    });\n \n    while (true) {\n        var buf: [1024]u8 = undefined;\n        var len: usize = 0;\n        try coro.io.single(aio.Recv{ .socket = socket, .buffer = &amp;buf, .out_read = &amp;len });\n        log.warn(&quot;got reply from server: {s}&quot;, .{buf[0..len]});\n        if (std.mem.indexOf(u8, buf[0..len], &quot;how cool is that?&quot;)) |_| break;\n    }\n \n    try coro.io.single(aio.Send{ .socket = socket, .buffer = &quot;dude, I don&#x27;t care&quot; });\n \n    var buf: [1024]u8 = undefined;\n    var len: usize = 0;\n    try coro.io.single(aio.Recv{ .socket = socket, .buffer = &amp;buf, .out_read = &amp;len });\n    log.warn(&quot;got final words from server: {s}&quot;, .{buf[0..len]});\n}\n \npub fn main() !void {\n    var gpa: std.heap.GeneralPurposeAllocator(.{}) = .{};\n    defer _ = gpa.deinit();\n    var scheduler = try coro.Scheduler.init(gpa.allocator(), .{});\n    defer scheduler.deinit();\n    _ = try scheduler.spawn(server, .{}, .{});\n    _ = try scheduler.spawn(client, .{}, .{});\n    try scheduler.run();\n}\n","title":"Performing io operations","titles":["CORO API","IO"]},"40":{"href":"/coro-io#cancellations","html":"\n<p>Use <code>aio.Cancel</code> operation to cancel the currently running operations in a task.\nThe <code>out_error</code> of such operation will then be set as <code>error.OperationCanceled</code>.</p>\n<p>Alternatively it&#x27;s possible to call <code>scheduler.wakeup(task);</code> or <code>scheduler.wakeupFromIo(task)</code>\nwhich also cancels all currently running io on that task.</p>","isPage":false,"text":"\nUse aio.Cancel operation to cancel the currently running operations in a task.\nThe out_error of such operation will then be set as error.OperationCanceled.\nAlternatively it&#x27;s possible to call scheduler.wakeup(task); or scheduler.wakeupFromIo(task)\nwhich also cancels all currently running io on that task.","title":"Cancellations","titles":["CORO API","IO"]},"41":{"href":"/coro-scheduler#coro-api","html":"</header>\n","isPage":true,"text":"\n","title":"CORO API","titles":[]},"42":{"href":"/coro-scheduler#scheduler","html":"\n<p>To do a non-blocking IO while still maintaining the imperative blocking style of coding.\nWe need a coroutines and a scheduler that schedules the context switches of said coroutines.\nIn this guide we refer to the coroutines as tasks.</p>\n","isPage":false,"text":"\nTo do a non-blocking IO while still maintaining the imperative blocking style of coding.\nWe need a coroutines and a scheduler that schedules the context switches of said coroutines.\nIn this guide we refer to the coroutines as tasks.\n","title":"Scheduler","titles":["CORO API"]},"43":{"href":"/coro-scheduler#initializing-scheduler-instance","html":"\n<p>Scheduler requires an <code>allocator</code> and optional <code>InitOptions</code>.\nThe scheduler stores the <code>allocator</code> and uses it for managed task creation and destruction.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">init</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">gpa</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">allocator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), .{});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">defer</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deinit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n","isPage":false,"text":"\nScheduler requires an allocator and optional InitOptions.\nThe scheduler stores the allocator and uses it for managed task creation and destruction.\nvar scheduler = try coro.Scheduler.init(gpa.allocator(), .{});\ndefer scheduler.deinit();\n","title":"Initializing Scheduler instance","titles":["CORO API","Scheduler"]},"44":{"href":"/coro-scheduler#spawning-tasks","html":"\n<p>A new task can be spawned by specifying <code>entrypoint</code>, which must be a function with either <code>void</code> or <code>!void</code> return type.\nIf it&#x27;s <code>!void</code> and returns a error then a stacktrace of the error is dumped, similarly to how std&#x27;s <code>std.Thread</code> works.\nSupply arguments to the <code>entrypoint</code> by providing a tuple as the second parameter.\nThe third parameter takes a optional <code>SpawnOptions</code>, which can be used to specify the stack size of the Task, or\nprovide a pre-allocated unmanaged stack.</p>\n<p>When task is spawned, the <code>entrypoint</code> is immediately called and the code in the <code>entrypoint</code> runs until the task either\nyields or performs a IO operation using one of the <code>coro.io</code> namespace functions.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> task</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">spawn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">entrypoint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{ </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;args&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, .{});</span></span></code></pre>\n","isPage":false,"text":"\nA new task can be spawned by specifying entrypoint, which must be a function with either void or !void return type.\nIf it&#x27;s !void and returns a error then a stacktrace of the error is dumped, similarly to how std&#x27;s std.Thread works.\nSupply arguments to the entrypoint by providing a tuple as the second parameter.\nThe third parameter takes a optional SpawnOptions, which can be used to specify the stack size of the Task, or\nprovide a pre-allocated unmanaged stack.\nWhen task is spawned, the entrypoint is immediately called and the code in the entrypoint runs until the task either\nyields or performs a IO operation using one of the coro.io namespace functions.\nvar task = try scheduler.spawn(entrypoint, .{ 1, &quot;args&quot; }, .{});\n","title":"Spawning tasks","titles":["CORO API","Scheduler"]},"45":{"href":"/coro-scheduler#reaping-tasks","html":"\n<p>Following removes a task, freeing its memory and canceling all running IO operations for that task.\nThe reap may be delayed in case the task is currently doing IO, the IO operations will be actively canceled.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">reap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>Alternatively reap all the tasks using the following.\nThe reap may be delayed in case the tasks are currently doing IO, the IO operations will be actively canceled.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">reapAll</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n<p>Call to <code>deinit</code> also reaps all tasks.</p>\n","isPage":false,"text":"\nFollowing removes a task, freeing its memory and canceling all running IO operations for that task.\nThe reap may be delayed in case the task is currently doing IO, the IO operations will be actively canceled.\nscheduler.reap(task);\nAlternatively reap all the tasks using the following.\nThe reap may be delayed in case the tasks are currently doing IO, the IO operations will be actively canceled.\nscheduler.reapAll();\nCall to deinit also reaps all tasks.\n","title":"Reaping tasks","titles":["CORO API","Scheduler"]},"46":{"href":"/coro-scheduler#running","html":"\n<p>The scheduler can process tasks and io one step a time with the tick method.\nBy running tick the scheduler will reap tasks that returned (dead tasks) and context switch back to the\ntasks in case they completed their IO operations.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// if there are pending io operations, blocks until at least one completes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">tick</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">blocking</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// returns immediately regardless of the current io state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">tick</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">nonblocking</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>To run the scheduler until all tasks have returned aka died, then use the following.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>","isPage":false,"text":"\nThe scheduler can process tasks and io one step a time with the tick method.\nBy running tick the scheduler will reap tasks that returned (dead tasks) and context switch back to the\ntasks in case they completed their IO operations.\n// if there are pending io operations, blocks until at least one completes\ntry scheduler.tick(.blocking);\n// returns immediately regardless of the current io state\ntry scheduler.tick(.nonblocking);\nTo run the scheduler until all tasks have returned aka died, then use the following.\ntry scheduler.run();","title":"Running","titles":["CORO API","Scheduler"]},"47":{"href":"#overview","html":"</header>\n<p>zig-aio provides io_uring like asynchronous API and coroutine powered IO tasks for zig</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> @import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;std&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> aio</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> @import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;aio&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">scoped</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">aio_static</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">cwd</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">openFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;flake.nix&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4096</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u8</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">usize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">cwd</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">openFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;build.zig.zon&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> buf2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4096</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u8</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> len2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">usize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> ret</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">batch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.{</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">        aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Read</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">file</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_read</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        },</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">        aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Read</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">file</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_read</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">info</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;{s}&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">..</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]});</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">info</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;{s}&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">..</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]});</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">info</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;{}&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ret</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":true,"text":"\nzig-aio provides io_uring like asynchronous API and coroutine powered IO tasks for zig\nconst std = @import(&quot;std&quot;);\nconst aio = @import(&quot;aio&quot;);\nconst log = std.log.scoped(.aio_static);\n \npub fn main() !void {\n    var f = try std.fs.cwd().openFile(&quot;flake.nix&quot;, .{});\n    defer f.close();\n    var buf: [4096]u8 = undefined;\n    var len: usize = 0;\n \n    var f2 = try std.fs.cwd().openFile(&quot;build.zig.zon&quot;, .{});\n    defer f2.close();\n    var buf2: [4096]u8 = undefined;\n    var len2: usize = 0;\n \n    const ret = try aio.batch(.{\n        aio.Read{\n            .file = f,\n            .buffer = &amp;buf,\n            .out_read = &amp;len,\n        },\n        aio.Read{\n            .file = f2,\n            .buffer = &amp;buf2,\n            .out_read = &amp;len2,\n        },\n    });\n \n    log.info(&quot;{s}&quot;, .{buf[0..len]});\n    log.info(&quot;{s}&quot;, .{buf2[0..len2]});\n    log.info(&quot;{}&quot;, .{ret});\n}\n","title":"Overview","titles":[]},"48":{"href":"#features","html":"\n<ul>\n<li>Blocking and asynchronous API</li>\n<li>Atomic operations</li>\n<li>Parallel execution</li>\n<li>Cancellation</li>\n<li>Timeouts</li>\n<li>Comes with a runtime and scheduler for coroutines</li>\n<li>Tightly tied into io_uring</li>\n</ul>","isPage":false,"text":"\n\nBlocking and asynchronous API\nAtomic operations\nParallel execution\nCancellation\nTimeouts\nComes with a runtime and scheduler for coroutines\nTightly tied into io_uring\n","title":"Features","titles":["Overview"]},"49":{"href":"/integration#integrating-zig-aio","html":"</header>\n","isPage":true,"text":"\n","title":"Integrating zig-aio","titles":[]},"50":{"href":"/integration#zig-package-manager","html":"\n","isPage":false,"text":"\n","title":"Zig Package Manager","titles":["Integrating zig-aio"]},"51":{"href":"/integration#fetching-and-updating-the-zig-aio-dependency","html":"\n<p>Run the following command in zig project root directory.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">zig</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fetch</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --save</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> git+https://github.com/Cloudef/zig-aio.git</span></span></code></pre>\n","isPage":false,"text":"\nRun the following command in zig project root directory.\nzig fetch --save git+https://github.com/Cloudef/zig-aio.git\n","title":"Fetching and updating the zig-aio dependency","titles":["Integrating zig-aio","Zig Package Manager"]},"52":{"href":"/integration#using-zig-aio-modules-in-zig-project","html":"\n<p>In <code>build.zig</code> file add the following for whichever modules <code>zig-aio</code> is required.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// get the &quot;zig-aio&quot; dependency from &quot;build.zig.zon&quot;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> zig_aio</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">dependency</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;zig-aio&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{});</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// for exe, lib, tests, etc.</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">exe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">root_module</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addImport</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;aio&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">zig_aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">module</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;aio&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// for coroutines api</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">exe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">root_module</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addImport</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;coro&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">zig_aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">module</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;coro&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span></code></pre>\n","isPage":false,"text":"\nIn build.zig file add the following for whichever modules zig-aio is required.\n// get the &quot;zig-aio&quot; dependency from &quot;build.zig.zon&quot;\nconst zig_aio = b.dependency(&quot;zig-aio&quot;, .{});\n// for exe, lib, tests, etc.\nexe.root_module.addImport(&quot;aio&quot;, zig_aio.module(&quot;aio&quot;));\n// for coroutines api\nexe.root_module.addImport(&quot;coro&quot;, zig_aio.module(&quot;coro&quot;));\n","title":"Using zig-aio modules in zig project","titles":["Integrating zig-aio","Zig Package Manager"]},"53":{"href":"/integration#using-zig-aio-in-zig-code","html":"\n<p>It&#x27;s possible to import the modules like this.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> aio</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> @import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;aio&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> @import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;coro&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>","isPage":false,"text":"\nIt&#x27;s possible to import the modules like this.\nconst aio = @import(&quot;aio&quot;);\nconst coro = @import(&quot;coro&quot;);","title":"Using zig-aio in zig code","titles":["Integrating zig-aio","Zig Package Manager"]}},"dirtCount":0,"index":[["zon",{"2":{"47":1,"52":1}}],["zig",{"0":{"49":1,"50":1,"51":1,"52":2,"53":2},"1":{"50":1,"51":2,"52":2,"53":2},"2":{"6":1,"8":1,"47":3,"51":3,"52":8}}],["4096",{"2":{"47":2}}],["git",{"2":{"51":1}}],["github",{"2":{"51":1}}],["git+https",{"2":{"51":1}}],["give",{"2":{"39":1}}],["guide",{"2":{"42":1}}],["get",{"2":{"52":1}}],["getossocklen",{"2":{"39":2}}],["generalpurposeallocator",{"2":{"39":1}}],["gpa",{"2":{"39":3,"43":1}}],["got",{"2":{"39":3}}],["gt",{"2":{"10":1}}],["|",{"2":{"39":4}}],["||",{"2":{"13":1}}],["kernel",{"2":{"38":1}}],["known",{"2":{"1":1}}],["you",{"2":{"34":1}}],["yields",{"2":{"38":1,"44":1}}],["yielding",{"2":{"36":2,"38":1}}],["yielded",{"2":{"34":1,"35":1}}],["yield",{"2":{"34":3}}],["2",{"2":{"17":1,"18":1,"19":1,"20":1,"31":1,"39":2}}],["0",{"2":{"10":1,"15":1,"16":1,"21":1,"23":2,"25":2,"27":2,"28":1,"29":1,"30":2,"39":14,"47":4}}],["root",{"2":{"51":1,"52":2}}],["runtime",{"2":{"48":1}}],["runs",{"2":{"44":1}}],["run",{"2":{"38":1,"39":1,"46":2,"51":1}}],["running",{"0":{"46":1},"2":{"10":1,"34":2,"40":2,"45":1,"46":1}}],["required",{"2":{"52":1}}],["requires",{"2":{"2":1,"43":1}}],["ret",{"2":{"47":2}}],["returned",{"2":{"46":2}}],["return",{"2":{"10":1,"44":1}}],["returns",{"2":{"4":3,"7":2,"9":2,"10":1,"44":1,"46":1}}],["regardless",{"2":{"46":1}}],["removes",{"2":{"45":1}}],["reaps",{"2":{"45":1}}],["reapall",{"2":{"45":1}}],["reap",{"2":{"45":4,"46":1}}],["reaping",{"0":{"45":1}}],["reads",{"2":{"15":1}}],["readerror",{"2":{"10":1,"15":1}}],["read",{"0":{"15":1},"2":{"3":1,"9":2,"10":6,"15":4,"19":1,"39":3,"47":4}}],["reply",{"2":{"39":2}}],["representing",{"2":{"34":1}}],["reuseport",{"2":{"39":1}}],["reuseaddr",{"2":{"39":1}}],["renameerror",{"2":{"27":1}}],["rename",{"2":{"27":1}}],["renameat",{"0":{"27":1},"2":{"27":1}}],["relative",{"2":{"21":1,"27":2,"28":1,"29":1,"30":1}}],["recvfromerror",{"2":{"19":1}}],["recv",{"0":{"19":1},"2":{"19":2,"39":3}}],["referenced",{"2":{"24":1,"26":1}}],["refer",{"2":{"13":1,"42":1}}],["resources",{"2":{"10":1}}],["res",{"2":{"4":2,"10":2}}],["how",{"2":{"39":2,"44":1}}],["hey",{"2":{"39":1}}],["heap",{"2":{"2":2,"39":1}}],["handle",{"2":{"34":1}}],["handful",{"2":{"12":1}}],["has",{"2":{"13":1}}],["have",{"2":{"10":1,"25":1,"46":1}}],["quot",{"2":{"7":2,"9":2,"10":6,"39":26,"44":2,"47":14,"52":14,"53":4}}],["queues",{"2":{"38":1}}],["queue",{"2":{"3":4}}],["queuing",{"0":{"3":1}}],["value",{"2":{"34":4}}],["var",{"2":{"2":1,"9":2,"10":4,"39":11,"43":1,"44":1,"47":6}}],["void",{"2":{"7":1,"9":1,"13":1,"39":3,"44":3,"47":1}}],["127",{"2":{"39":1}}],["128",{"2":{"39":1}}],["1327",{"2":{"39":2}}],["1024",{"2":{"9":1,"10":1,"39":3}}],["1",{"2":{"4":1,"39":3,"44":1}}],["nix",{"2":{"47":1}}],["namespace",{"2":{"38":1,"39":1,"44":1}}],["net",{"2":{"39":2}}],["need",{"2":{"34":1,"42":1}}],["new",{"2":{"27":4,"44":1}}],["next",{"2":{"9":4,"10":1,"13":4,"25":1,"38":1,"39":6}}],["nsec",{"2":{"23":1,"25":1,"39":1}}],["null",{"2":{"13":2,"16":1,"17":2,"20":1,"25":1}}],["num",{"2":{"10":1}}],["number",{"2":{"4":2,"10":2}}],["nop",{"2":{"13":2}}],["notfound",{"2":{"24":1,"26":1}}],["not",{"2":{"10":1,"38":1}}],["no",{"2":{"4":1,"7":1,"9":1,"13":1,"34":1,"35":1,"36":1}}],["nonblocking",{"2":{"4":1,"46":1}}],["none",{"2":{"3":1}}],["non",{"2":{"2":1,"4":2,"42":1}}],["etc",{"2":{"52":1}}],["entrypoint",{"2":{"44":5}}],["enable",{"2":{"39":1}}],["enum",{"2":{"13":1,"34":2}}],["exe",{"2":{"52":3}}],["execution",{"2":{"48":1}}],["execute",{"2":{"38":1}}],["example",{"2":{"39":1}}],["expired",{"2":{"25":1}}],["expires",{"2":{"23":1}}],["existing",{"2":{"24":1,"26":1}}],["e",{"2":{"13":1}}],["every",{"2":{"13":1}}],["even",{"2":{"4":1}}],["error",{"2":{"7":2,"9":1,"10":12,"13":4,"22":1,"23":1,"24":1,"25":1,"26":1,"32":1,"40":2,"44":2}}],["errors",{"2":{"4":1,"9":1,"10":3}}],["either",{"2":{"3":1,"4":1,"13":2,"44":2}}],["logs",{"2":{"39":1}}],["log",{"2":{"39":6,"47":5}}],["locating",{"2":{"28":1}}],["location",{"2":{"15":1,"16":1,"21":1}}],["left",{"2":{"34":1}}],["len2",{"2":{"47":3}}],["len",{"2":{"9":2,"10":2,"39":10,"47":3}}],["least",{"2":{"4":2,"46":1}}],["lib",{"2":{"52":1}}],["linktimeout",{"0":{"25":1},"2":{"25":1}}],["linked",{"2":{"13":1,"25":1}}],["linking",{"2":{"9":1,"30":1}}],["link",{"2":{"9":3,"10":1,"13":3,"25":1,"30":2,"39":6}}],["listen",{"2":{"39":1}}],["list",{"2":{"9":1}}],["likely",{"2":{"33":1}}],["like",{"2":{"3":1,"47":1,"53":1}}],["just",{"2":{"3":1}}],["pending",{"2":{"46":1}}],["performs",{"2":{"44":1}}],["performing",{"0":{"39":1},"2":{"39":1}}],["perform",{"0":{"7":1,"8":1},"1":{"9":1,"10":1},"2":{"38":1}}],["performed",{"2":{"3":1}}],["pre",{"2":{"44":1}}],["preferred",{"2":{"34":1}}],["project",{"0":{"52":1},"2":{"51":1}}],["process",{"2":{"46":1}}],["provide",{"2":{"44":1}}],["provides",{"2":{"6":1,"8":1,"47":1}}],["providing",{"2":{"44":1}}],["program",{"2":{"38":1,"39":1}}],["protocol",{"2":{"31":1,"39":2}}],["powered",{"2":{"47":1}}],["pointed",{"2":{"15":1,"16":1,"21":1}}],["posix",{"2":{"10":2,"17":4,"18":3,"19":2,"20":2,"28":1,"30":1,"31":5,"32":1,"39":19}}],["possible",{"2":{"3":1,"4":1,"35":2,"38":1,"40":1,"53":1}}],["pub",{"2":{"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"39":2,"47":1}}],["package",{"0":{"50":1},"1":{"51":1,"52":1,"53":1}}],["paired",{"0":{"34":1}}],["parallel",{"2":{"48":1}}],["parameter",{"2":{"29":1,"44":2}}],["part",{"2":{"33":1}}],["path",{"2":{"21":2,"27":4,"28":2,"29":2,"30":2}}],["panic",{"2":{"10":2}}],["page",{"2":{"2":2}}],["switch",{"2":{"46":1}}],["switches",{"0":{"34":1},"2":{"42":1}}],["save",{"2":{"51":1}}],["said",{"2":{"42":1}}],["same",{"2":{"2":1,"34":1,"39":1}}],["spawnoptions",{"2":{"44":1}}],["spawned",{"2":{"44":2}}],["spawning",{"0":{"44":1}}],["spawn",{"2":{"39":2,"44":1}}],["spin",{"2":{"39":1}}],["specifying",{"2":{"44":1}}],["specify",{"2":{"29":1,"44":1}}],["schedules",{"2":{"42":1}}],["scheduler",{"0":{"42":1,"43":1},"1":{"43":1,"44":1,"45":1,"46":1},"2":{"38":3,"39":6,"40":2,"42":1,"43":5,"44":1,"45":2,"46":6,"48":1}}],["scoped",{"2":{"39":1,"47":1}}],["so",{"2":{"39":2}}],["sol",{"2":{"39":2}}],["source",{"2":{"23":1}}],["sock",{"2":{"31":1,"39":12}}],["socklen",{"2":{"17":1,"18":1}}],["sockaddr",{"2":{"17":1,"18":1}}],["socketerror",{"2":{"31":1}}],["socket",{"0":{"31":1},"2":{"17":4,"18":2,"19":2,"20":2,"31":4,"32":3,"39":36}}],["some",{"2":{"38":1}}],["sometimes",{"2":{"36":1}}],["someenum",{"2":{"34":2}}],["somewhere",{"2":{"10":1}}],["someoperationfailed",{"2":{"9":1,"10":1}}],["server",{"2":{"39":6}}],["second",{"2":{"44":1}}],["secs",{"2":{"39":1}}],["sec",{"2":{"23":1,"25":1,"39":1}}],["senderror",{"2":{"20":1}}],["send",{"0":{"20":1},"2":{"20":2,"39":5}}],["see",{"2":{"17":1,"18":1,"19":1,"20":1,"31":1}}],["setsockopt",{"2":{"39":2}}],["setups",{"2":{"38":1}}],["set",{"2":{"13":3,"25":1,"39":1,"40":1}}],["setting",{"2":{"10":1}}],["syscall",{"2":{"38":1}}],["systems",{"2":{"29":1}}],["system",{"2":{"10":1}}],["symlinkerror",{"2":{"30":1}}],["symlink",{"2":{"30":1}}],["symlinkat",{"0":{"30":1},"2":{"30":1}}],["syncerror",{"2":{"14":1}}],["synchronizes",{"2":{"14":1}}],["sharederror",{"2":{"13":1}}],["supply",{"2":{"44":1}}],["supplied",{"2":{"34":1}}],["supporting",{"2":{"29":1}}],["supports",{"2":{"13":1}}],["supported",{"2":{"12":1}}],["success",{"2":{"10":2,"13":1}}],["such",{"2":{"10":1,"40":1}}],["size",{"2":{"44":1}}],["simple",{"2":{"39":1}}],["similarly",{"2":{"44":1}}],["similar",{"2":{"10":1,"39":1}}],["single",{"0":{"7":1},"2":{"3":2,"7":2,"38":1,"39":8}}],["step",{"2":{"46":1}}],["stores",{"2":{"43":1}}],["stored",{"2":{"10":1,"13":4,"15":1,"16":1,"21":1}}],["style",{"2":{"42":1}}],["stream",{"2":{"39":2}}],["struct",{"2":{"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":2,"24":1,"25":2,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1}}],["static",{"2":{"47":1}}],["state",{"2":{"34":2,"36":2,"38":1,"46":1}}],["stack",{"2":{"44":2}}],["stacktrace",{"2":{"44":1}}],["starts",{"2":{"23":1}}],["start",{"2":{"9":1,"13":1}}],["still",{"2":{"10":1,"42":1}}],["std",{"2":{"2":2,"10":2,"14":2,"15":2,"16":2,"17":4,"18":3,"19":2,"20":2,"21":4,"22":1,"27":3,"28":2,"29":3,"30":2,"31":5,"32":1,"39":28,"44":2,"47":5}}],["s",{"2":{"7":1,"35":1,"36":1,"39":3,"40":1,"44":2,"47":2,"53":1}}],["we",{"2":{"42":2}}],["were",{"2":{"4":2,"9":1}}],["written",{"2":{"16":3,"20":1}}],["writes",{"2":{"16":1}}],["writeerror",{"2":{"10":1,"16":1}}],["write",{"0":{"16":1},"2":{"3":1,"7":1,"9":1,"10":5,"16":1}}],["what",{"2":{"36":1}}],["while",{"2":{"35":1,"38":1,"39":1,"42":1}}],["whichever",{"2":{"52":1}}],["which",{"2":{"10":2,"40":1,"44":2}}],["where",{"2":{"34":1}}],["when",{"2":{"9":1,"13":2,"38":1,"44":1}}],["words",{"2":{"39":1}}],["works",{"2":{"44":1}}],["work",{"2":{"2":2,"3":2,"4":2}}],["won",{"2":{"9":1,"13":1}}],["warn",{"2":{"39":3}}],["wake",{"2":{"36":1}}],["wakeup",{"0":{"36":1},"2":{"36":2,"40":1}}],["wakeupfromio",{"2":{"35":1,"40":1}}],["wakeupfromstate",{"2":{"34":1}}],["way",{"2":{"34":1}}],["ways",{"2":{"10":1}}],["waiting",{"2":{"39":1}}],["wait",{"2":{"4":1}}],["was",{"2":{"2":1,"7":1,"10":1,"13":1}}],["will",{"2":{"3":1,"4":1,"10":1,"13":4,"25":2,"36":1,"40":1,"45":2,"46":1}}],["with",{"2":{"3":1,"38":2,"44":1,"46":1,"48":1}}],["32",{"2":{"2":1}}],["=",{"2":{"2":2,"4":2,"7":2,"9":8,"10":15,"13":5,"14":1,"15":2,"16":3,"17":3,"18":1,"19":1,"20":2,"21":1,"22":1,"23":3,"24":1,"25":4,"26":1,"27":1,"28":1,"29":2,"30":1,"31":1,"32":1,"39":65,"43":1,"44":1,"47":16,"52":1,"53":2}}],["m",{"2":{"39":1}}],["mkdirat",{"0":{"29":1},"2":{"29":1}}],["monotnic",{"2":{"23":1}}],["modules",{"0":{"52":1},"2":{"52":1,"53":1}}],["module",{"2":{"6":1,"39":1,"52":4}}],["mode",{"2":{"4":1,"29":4}}],["maintaining",{"2":{"42":1}}],["main",{"2":{"39":1,"47":1}}],["matter",{"2":{"36":1}}],["makeerror",{"2":{"29":1}}],["manager",{"0":{"50":1},"1":{"51":1,"52":1,"53":1}}],["managed",{"2":{"43":1}}],["man",{"2":{"17":1,"18":1,"19":1,"20":1,"31":1}}],["may",{"2":{"10":1,"38":1,"45":2}}],["max",{"2":{"2":2}}],["my",{"2":{"9":4,"10":4}}],["method",{"2":{"46":1}}],["methods",{"2":{"8":1}}],["mem",{"2":{"39":3}}],["memory",{"2":{"2":1,"45":1}}],["merged",{"2":{"38":1}}],["multi",{"0":{"9":1},"2":{"9":1,"10":1,"39":2}}],["multiple",{"0":{"8":1},"1":{"9":1,"10":1},"2":{"3":2,"39":1}}],["must",{"2":{"2":1,"25":1,"44":1}}],["fetch",{"2":{"51":1}}],["fetching",{"0":{"51":1}}],["features",{"0":{"48":1}}],["f2",{"2":{"47":3}}],["fn",{"2":{"39":3,"47":1}}],["flake",{"2":{"47":1}}],["flags",{"2":{"21":2,"31":1,"39":2}}],["flow",{"2":{"34":1}}],["freeing",{"2":{"45":1}}],["frees",{"2":{"2":1}}],["from",{"2":{"15":1,"16":1,"34":1,"36":1,"38":1,"39":3,"52":1}}],["fs",{"2":{"14":2,"15":2,"16":2,"21":4,"22":1,"27":3,"28":1,"29":3,"30":1,"47":2}}],["fsync",{"0":{"14":1},"2":{"3":1,"14":1}}],["full",{"2":{"39":1}}],["function",{"2":{"34":2,"44":1}}],["functions",{"2":{"6":1,"38":1,"44":1}}],["future",{"2":{"13":1}}],["final",{"2":{"39":1}}],["finishes",{"2":{"25":2}}],["find",{"2":{"10":1}}],["first",{"2":{"13":1}}],["fields",{"0":{"13":1},"2":{"13":1}}],["field",{"2":{"9":1,"10":1}}],["file",{"2":{"7":1,"9":2,"10":2,"14":4,"15":4,"16":4,"21":6,"22":3,"28":1,"47":2,"52":1}}],["f",{"2":{"7":1,"9":2,"10":2,"47":3}}],["following",{"2":{"6":1,"34":2,"35":1,"45":2,"46":1,"51":1,"52":1}}],["for",{"2":{"2":1,"4":1,"6":1,"8":1,"38":2,"39":1,"43":1,"45":1,"47":1,"48":1,"52":3}}],["false",{"2":{"13":1,"39":1}}],["failure",{"2":{"13":1}}],["fail",{"2":{"10":2}}],["failed",{"2":{"7":1,"9":1,"10":3,"13":1}}],["fails",{"2":{"3":1}}],["fashion",{"2":{"4":1}}],["dumped",{"2":{"44":1}}],["dude",{"2":{"39":1}}],["during",{"2":{"2":2,"38":1}}],["do",{"2":{"42":1}}],["don",{"2":{"39":1}}],["doing",{"2":{"35":1,"39":1,"45":2}}],["domain",{"2":{"31":1,"39":2}}],["died",{"2":{"46":1}}],["directory",{"2":{"28":1,"29":2,"51":1}}],["dir",{"2":{"21":3,"27":7,"28":3,"29":5,"30":3}}],["disk",{"2":{"14":1}}],["dependency",{"0":{"51":1},"2":{"52":2}}],["dead",{"2":{"46":1}}],["delayed",{"2":{"45":2}}],["delete",{"2":{"28":1}}],["destruction",{"2":{"43":1}}],["debug",{"2":{"39":2}}],["decrease",{"2":{"13":1}}],["decreasing",{"2":{"13":1}}],["dec",{"2":{"13":1}}],["default",{"2":{"29":1}}],["define",{"2":{"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1}}],["defined",{"2":{"10":1}}],["defer",{"2":{"2":1,"39":2,"43":1,"47":2}}],["deinit",{"2":{"2":3,"39":2,"43":1,"45":1}}],["dynamic",{"0":{"1":1,"2":1},"1":{"2":1,"3":1,"4":1},"2":{"1":1,"2":2,"38":1}}],["b",{"2":{"52":1}}],["break",{"2":{"39":1}}],["bind",{"2":{"39":1}}],["back",{"2":{"46":1}}],["backend",{"2":{"38":1}}],["backends",{"2":{"38":1}}],["batch",{"0":{"10":1},"2":{"10":4,"47":1}}],["batching",{"2":{"8":1}}],["bool",{"2":{"13":1,"25":1}}],["bound",{"2":{"2":1}}],["bye",{"2":{"39":1}}],["bytes",{"2":{"15":1,"16":1}}],["by",{"2":{"10":1,"15":1,"16":1,"21":2,"24":1,"26":1,"35":3,"44":2,"46":1}}],["build",{"2":{"47":1,"52":2}}],["buf2",{"2":{"47":3}}],["buf",{"2":{"39":10,"47":3}}],["buffer",{"2":{"7":1,"9":4,"10":4,"15":2,"16":2,"19":1,"20":1,"39":8,"47":2}}],["but",{"2":{"10":1,"39":1}}],["blocks",{"2":{"4":1,"7":1,"9":1,"46":1}}],["blocking",{"2":{"4":5,"6":1,"35":1,"42":2,"46":1,"48":1}}],["below",{"2":{"39":1}}],["beneficial",{"2":{"38":1}}],["between",{"2":{"34":1}}],["being",{"2":{"34":1,"35":1}}],["before",{"2":{"25":3}}],["be",{"2":{"1":1,"2":1,"3":1,"9":1,"10":1,"13":6,"25":2,"36":1,"38":1,"40":1,"44":3,"45":4}}],["uring",{"2":{"38":1,"47":1,"48":1}}],["updating",{"0":{"51":1}}],["up",{"2":{"36":1,"39":1}}],["upper",{"2":{"2":1}}],["u32",{"2":{"29":1,"31":3}}],["u64",{"2":{"15":1,"16":1}}],["u16",{"2":{"13":3}}],["unmanaged",{"2":{"44":1}}],["unpaired",{"0":{"36":1}}],["unlinkaterror",{"2":{"28":1}}],["unlinkat",{"0":{"28":1},"2":{"28":1}}],["union",{"2":{"13":1}}],["undefined",{"2":{"9":2,"10":4,"39":6,"47":2}}],["until",{"2":{"4":1,"7":1,"9":2,"13":1,"44":1,"46":2}}],["u8",{"2":{"9":1,"10":1,"15":1,"16":1,"19":1,"20":1,"21":1,"27":2,"28":1,"29":1,"30":2,"39":4,"47":2}}],["useful",{"2":{"36":1}}],["use",{"2":{"34":1,"38":1,"39":1,"40":1,"46":1}}],["uses",{"2":{"23":1,"43":1}}],["used",{"2":{"1":1,"2":2,"9":1,"13":3,"44":1}}],["usize",{"2":{"9":1,"10":1,"15":1,"16":1,"19":1,"20":1,"39":3,"47":2}}],["using",{"0":{"9":1,"10":1,"52":1,"53":1},"2":{"35":1,"39":1,"44":1,"45":1}}],["cwd",{"2":{"47":2}}],["c",{"2":{"39":2}}],["client",{"2":{"39":12}}],["cloudef",{"2":{"51":1}}],["cloexec",{"2":{"39":2}}],["clock",{"2":{"23":1}}],["closesocket",{"0":{"32":1},"2":{"32":1,"39":2}}],["closes",{"2":{"22":1,"32":1}}],["close",{"0":{"22":1},"2":{"22":1,"47":2}}],["current",{"2":{"46":1}}],["currently",{"2":{"34":1,"35":2,"36":1,"40":2,"45":2}}],["customized",{"2":{"21":1}}],["change",{"2":{"33":1}}],["creation",{"2":{"43":1}}],["creating",{"2":{"2":1}}],["create",{"2":{"29":1,"30":1}}],["coding",{"2":{"42":1}}],["code",{"0":{"53":1},"2":{"38":1,"44":1}}],["cool",{"2":{"39":2}}],["cooperative",{"2":{"38":1}}],["coroutine",{"2":{"47":1}}],["coroutines",{"2":{"42":3,"48":1,"52":1}}],["coro",{"0":{"33":1,"37":1,"41":1},"1":{"34":1,"35":1,"36":1,"38":1,"39":1,"40":1,"42":1,"43":1,"44":1,"45":1,"46":1},"2":{"34":2,"35":1,"36":1,"38":2,"39":18,"43":1,"44":1,"52":2,"53":2}}],["counter",{"2":{"13":5}}],["com",{"2":{"51":1}}],["command",{"2":{"51":1}}],["common",{"0":{"13":1},"2":{"13":1}}],["comes",{"2":{"48":1}}],["completition",{"2":{"38":1}}],["completionresult",{"2":{"4":1,"10":1}}],["completing",{"0":{"4":1}}],["completes",{"2":{"4":1,"7":1,"9":1,"13":1,"23":1,"46":1}}],["complete",{"2":{"4":5,"7":1,"9":2}}],["completed",{"2":{"2":1,"4":2,"10":1,"13":1,"46":1}}],["connecterror",{"2":{"18":1}}],["connect",{"0":{"18":1},"2":{"18":2,"39":1}}],["control",{"2":{"34":1}}],["continue",{"2":{"34":1}}],["context",{"0":{"34":1},"2":{"42":1,"46":1}}],["contents",{"2":{"7":1,"9":1,"10":1,"14":1,"16":1}}],["contains",{"2":{"10":1}}],["containing",{"2":{"4":1}}],["const",{"2":{"2":1,"4":2,"10":1,"13":1,"14":1,"15":1,"16":2,"17":1,"18":2,"19":1,"20":2,"21":2,"22":1,"23":1,"24":1,"25":1,"26":1,"27":3,"28":2,"29":2,"30":3,"31":1,"32":1,"39":7,"47":4,"52":1,"53":2}}],["care",{"2":{"39":1}}],["called",{"2":{"44":1}}],["caller",{"2":{"34":1}}],["calling",{"2":{"38":1}}],["call",{"2":{"3":2,"4":1,"7":1,"10":1,"34":1,"35":1,"40":1,"45":1}}],["cancellation",{"2":{"48":1}}],["cancellations",{"0":{"40":1}}],["cancels",{"2":{"40":1}}],["canceling",{"0":{"35":1},"2":{"45":1}}],["canceled",{"2":{"25":2,"45":2}}],["cancel",{"0":{"26":1},"2":{"24":1,"26":2,"35":3,"40":2}}],["can",{"2":{"1":1,"9":1,"13":3,"29":1,"44":2,"46":1}}],["case",{"2":{"1":1,"10":1,"13":1,"36":1,"45":2,"46":1}}],["tests",{"2":{"52":1}}],["tuple",{"2":{"44":1}}],["type",{"2":{"44":1}}],["tcp",{"2":{"39":2}}],["tied",{"2":{"48":1}}],["tightly",{"2":{"48":1}}],["tick",{"2":{"38":1,"46":4}}],["timeouts",{"2":{"48":1}}],["timeoutremove",{"0":{"24":1},"2":{"24":1}}],["timeout",{"0":{"23":1},"2":{"3":1,"23":4,"24":1,"25":4,"39":1}}],["time",{"2":{"1":1,"39":1,"46":1}}],["takes",{"2":{"34":1,"44":1}}],["tasks",{"0":{"44":1,"45":1},"2":{"34":1,"38":1,"42":1,"45":3,"46":5,"47":1}}],["task",{"2":{"34":5,"35":3,"36":3,"38":3,"40":4,"43":1,"44":5,"45":4}}],["target",{"2":{"30":2}}],["ts",{"2":{"23":1,"25":1,"39":1}}],["true",{"2":{"9":1,"10":1,"25":1,"39":8}}],["try",{"2":{"2":1,"3":2,"4":2,"7":1,"9":1,"10":1,"39":18,"43":1,"44":1,"46":3,"47":3}}],["two",{"2":{"8":1}}],["tobytes",{"2":{"39":2}}],["to",{"2":{"3":2,"4":3,"9":2,"10":3,"13":4,"21":1,"25":2,"27":2,"28":1,"29":1,"30":2,"33":1,"34":6,"35":2,"36":2,"38":4,"39":5,"40":2,"42":2,"44":3,"45":1,"46":2,"53":1}}],["third",{"2":{"44":1}}],["this",{"2":{"9":1,"13":3,"33":1,"34":1,"36":1,"38":1,"42":1,"53":1}}],["thread",{"2":{"44":1}}],["that",{"2":{"2":1,"4":2,"10":2,"13":3,"39":2,"40":1,"42":1,"45":1,"46":1}}],["their",{"2":{"46":1}}],["they",{"2":{"46":1}}],["then",{"2":{"13":1,"25":2,"35":1,"38":1,"40":1,"44":1,"46":1}}],["these",{"2":{"13":1}}],["there",{"2":{"7":1,"9":1,"13":1,"46":1}}],["the",{"0":{"51":1},"2":{"1":2,"2":3,"3":4,"4":6,"6":2,"7":3,"9":4,"10":5,"13":10,"14":2,"15":2,"16":2,"21":2,"23":3,"25":7,"29":3,"30":1,"33":1,"34":13,"35":4,"36":2,"38":11,"39":5,"40":2,"42":3,"43":2,"44":11,"45":8,"46":7,"51":1,"52":2,"53":1}}],["t",{"2":{"1":1,"9":1,"13":1,"17":3,"18":2,"19":1,"20":1,"31":1,"32":1,"34":1,"35":1,"39":4}}],["x27",{"2":{"1":1,"7":1,"9":1,"13":1,"34":1,"35":2,"36":1,"39":2,"40":1,"44":2,"53":1}}],["overview",{"0":{"47":1},"1":{"48":1}}],["ok",{"2":{"39":1}}],["other",{"2":{"38":1}}],["optional",{"2":{"43":1,"44":1}}],["options",{"2":{"39":2}}],["ops",{"2":{"39":1}}],["op",{"2":{"34":1,"35":1}}],["operating",{"2":{"29":1}}],["operationcanceled",{"2":{"40":1}}],["operation",{"0":{"7":1},"2":{"3":1,"4":2,"7":3,"9":6,"10":1,"13":10,"23":1,"25":5,"26":1,"38":1,"40":2,"44":1}}],["operations",{"0":{"3":1,"4":1,"8":1,"12":1,"39":1},"1":{"9":1,"10":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1},"2":{"1":1,"2":3,"3":3,"4":3,"8":1,"9":2,"10":3,"12":1,"13":2,"35":2,"38":3,"39":1,"40":1,"45":3,"46":2,"48":1}}],["openfile",{"2":{"47":2}}],["openflags",{"2":{"21":1}}],["openerror",{"2":{"21":1}}],["opened",{"2":{"21":1}}],["opening",{"2":{"21":1}}],["opens",{"2":{"21":1}}],["openat",{"0":{"21":1},"2":{"21":1}}],["old",{"2":{"27":4}}],["out",{"2":{"9":1,"10":6,"13":4,"15":2,"16":2,"17":1,"19":1,"20":1,"21":2,"25":1,"31":1,"39":6,"40":1,"47":2}}],["occured",{"2":{"4":1,"10":1}}],["on",{"2":{"29":1,"38":1,"40":1}}],["once",{"2":{"23":1,"39":1}}],["onto",{"2":{"14":1}}],["one",{"2":{"4":1,"38":1,"44":1,"46":2}}],["only",{"2":{"2":1}}],["or",{"2":{"3":1,"4":1,"13":2,"28":1,"40":1,"44":3}}],["offset",{"2":{"15":2,"16":2}}],["of",{"2":{"1":2,"3":1,"4":2,"7":1,"9":2,"10":5,"12":1,"13":2,"14":1,"15":1,"16":2,"29":1,"33":1,"34":1,"39":1,"40":1,"42":2,"44":3,"46":1}}],["i",{"2":{"39":2}}],["ipproto",{"2":{"31":1,"39":2}}],["i64",{"2":{"23":2,"25":2}}],["id",{"2":{"13":5,"24":3,"26":3}}],["imperative",{"2":{"42":1}}],["import",{"2":{"39":3,"47":2,"53":3}}],["implementation",{"2":{"10":1}}],["immediately",{"2":{"4":2,"9":1,"44":1,"46":1}}],["immediate",{"0":{"6":1},"1":{"7":1,"8":1,"9":1,"10":1},"2":{"3":1,"6":1}}],["if",{"2":{"3":1,"4":1,"7":2,"9":2,"10":3,"13":3,"25":2,"34":1,"35":1,"39":1,"44":1,"46":1}}],["issue",{"2":{"34":1}}],["is",{"2":{"3":2,"4":1,"9":1,"10":1,"13":2,"15":1,"16":1,"21":2,"33":1,"34":2,"35":2,"36":1,"38":1,"39":5,"44":3,"45":1,"52":1}}],["isn",{"2":{"1":1,"34":1,"35":1}}],["its",{"2":{"36":1,"45":1}}],["it",{"2":{"3":1,"4":1,"7":1,"10":1,"13":1,"34":1,"35":2,"36":1,"38":1,"40":1,"43":1,"44":1,"53":1}}],["indexof",{"2":{"39":1}}],["info",{"2":{"39":1,"47":3}}],["inet",{"2":{"39":2}}],["integrating",{"0":{"49":1},"1":{"50":1,"51":1,"52":1,"53":1}}],["internal",{"2":{"38":1}}],["int",{"2":{"39":2}}],["into",{"2":{"13":3,"15":1,"16":1,"21":1,"27":1,"38":1,"48":1}}],["inside",{"2":{"38":2}}],["instead",{"2":{"10":1,"39":1}}],["instance",{"0":{"2":1,"43":1},"2":{"2":2,"38":1}}],["inprogress",{"2":{"24":1,"25":1,"26":1}}],["inout",{"2":{"17":1}}],["increase",{"2":{"13":1}}],["increasing",{"2":{"13":1}}],["inc",{"2":{"13":1}}],["initoptions",{"2":{"43":1}}],["initip4",{"2":{"39":2}}],["initializing",{"0":{"2":1,"43":1}}],["init",{"2":{"2":3,"39":1,"43":1}}],["in",{"0":{"52":1,"53":1},"2":{"1":1,"2":2,"4":1,"6":1,"10":2,"13":3,"15":1,"16":1,"28":1,"34":1,"36":1,"38":1,"40":1,"42":1,"44":1,"45":2,"46":1,"51":1,"52":1}}],["io",{"0":{"1":1,"6":1,"35":1,"38":1,"39":1},"1":{"2":1,"3":1,"4":1,"7":1,"8":1,"9":1,"10":1,"39":1,"40":1},"2":{"1":1,"6":1,"8":1,"12":1,"35":3,"38":8,"39":12,"40":1,"42":1,"44":2,"45":5,"46":4,"47":2,"48":1}}],["addimport",{"2":{"52":2}}],["add",{"2":{"52":1}}],["addrlen",{"2":{"17":1,"18":1,"39":1}}],["addr",{"2":{"17":1,"18":1,"39":1}}],["address",{"2":{"13":4,"39":8}}],["aka",{"2":{"46":1}}],["able",{"2":{"36":1}}],["args",{"2":{"44":1}}],["arguments",{"2":{"44":1}}],["argument",{"2":{"34":1}}],["are",{"2":{"12":1,"13":1,"38":1,"45":1,"46":1}}],["af",{"2":{"31":1,"39":2}}],["actively",{"2":{"45":2}}],["actually",{"2":{"3":1}}],["accepterror",{"2":{"17":1}}],["accept",{"0":{"17":1},"2":{"17":2,"39":1}}],["asynchronous",{"2":{"47":1,"48":1}}],["as",{"2":{"10":1,"34":1,"35":1,"39":2,"40":1,"42":1,"44":1}}],["amp",{"2":{"9":2,"10":4,"39":13,"47":4}}],["amount",{"2":{"1":1,"15":1,"16":1}}],["alternatively",{"2":{"40":1,"45":1}}],["allows",{"2":{"38":1}}],["allowing",{"2":{"38":1}}],["allocated",{"2":{"44":1}}],["allocates",{"2":{"2":1}}],["allocator",{"2":{"2":4,"39":1,"43":3}}],["all",{"2":{"35":1,"38":3,"40":1,"45":3,"46":1}}],["also",{"2":{"35":1,"40":1,"45":1}}],["always",{"2":{"4":1}}],["at",{"2":{"4":2,"13":1,"29":1,"30":1,"39":1,"46":1}}],["atomic",{"2":{"3":1,"48":1}}],["any",{"2":{"9":1,"10":1,"36":1,"39":2}}],["and",{"0":{"51":1},"2":{"2":2,"4":1,"10":1,"38":1,"42":1,"43":3,"44":2,"45":1,"46":2,"47":1,"48":2}}],["an",{"2":{"2":1,"43":1}}],["a",{"0":{"7":1},"2":{"2":1,"7":1,"9":1,"12":1,"13":1,"14":1,"15":3,"16":1,"21":1,"22":1,"23":2,"25":1,"27":1,"28":1,"30":1,"32":1,"34":2,"38":4,"39":1,"40":1,"42":3,"44":8,"45":1,"46":1,"48":1}}],["ahead",{"2":{"1":1}}],["api",{"0":{"0":1,"5":1,"11":1,"33":1,"37":1,"41":1},"1":{"1":1,"2":1,"3":1,"4":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"34":1,"35":1,"36":1,"38":1,"39":1,"40":1,"42":1,"43":1,"44":1,"45":1,"46":1},"2":{"1":1,"3":1,"33":1,"39":2,"47":1,"48":1,"52":1}}],["aio",{"0":{"0":1,"5":1,"11":1,"49":1,"51":1,"52":1,"53":1},"1":{"1":1,"2":1,"3":1,"4":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"50":1,"51":1,"52":1,"53":1},"2":{"3":4,"4":1,"6":2,"7":2,"8":1,"9":3,"10":4,"35":1,"38":1,"39":20,"40":1,"47":7,"51":1,"52":8,"53":2}}]],"serializationVersion":2}
