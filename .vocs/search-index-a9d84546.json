{"documentCount":66,"nextId":66,"documentIds":{"0":"pages/aio-dynamic.mdx#aio-api","1":"pages/aio-dynamic.mdx#dynamic-io","2":"pages/aio-dynamic.mdx#initializing-dynamic-instance","3":"pages/aio-dynamic.mdx#queuing-operations","4":"pages/aio-dynamic.mdx#completing-operations","5":"pages/aio-dynamic.mdx#handler","6":"pages/aio-immediate.mdx#aio-api","7":"pages/aio-immediate.mdx#immediate-io","8":"pages/aio-immediate.mdx#perform-a-single-operation","9":"pages/aio-immediate.mdx#perform-multiple-operations","10":"pages/aio-immediate.mdx#using-multi","11":"pages/aio-immediate.mdx#using-complete","12":"pages/aio-operations.mdx#aio-api","13":"pages/aio-operations.mdx#operations","14":"pages/aio-operations.mdx#common-fields","15":"pages/aio-operations.mdx#nop","16":"pages/aio-operations.mdx#fsync","17":"pages/aio-operations.mdx#readtty","18":"pages/aio-operations.mdx#read","19":"pages/aio-operations.mdx#write","20":"pages/aio-operations.mdx#accept","21":"pages/aio-operations.mdx#connect","22":"pages/aio-operations.mdx#recv","23":"pages/aio-operations.mdx#send","24":"pages/aio-operations.mdx#recvmsg","25":"pages/aio-operations.mdx#sendmsg","26":"pages/aio-operations.mdx#shutdown","27":"pages/aio-operations.mdx#openat","28":"pages/aio-operations.mdx#closefile","29":"pages/aio-operations.mdx#closedir","30":"pages/aio-operations.mdx#timeout","31":"pages/aio-operations.mdx#linktimeout","32":"pages/aio-operations.mdx#cancel","33":"pages/aio-operations.mdx#renameat","34":"pages/aio-operations.mdx#unlinkat","35":"pages/aio-operations.mdx#mkdirat","36":"pages/aio-operations.mdx#symlinkat","37":"pages/aio-operations.mdx#childexit","38":"pages/aio-operations.mdx#socket","39":"pages/aio-operations.mdx#closesocket","40":"pages/aio-operations.mdx#notifyeventsource","41":"pages/aio-operations.mdx#waiteventsource","42":"pages/aio-operations.mdx#closeeventsource","43":"pages/coro-blocking-code.mdx#coro-api","44":"pages/coro-blocking-code.mdx#mixing-blocking-code","45":"pages/coro-blocking-code.mdx#example","46":"pages/coro-context-switches.mdx#coro-api","47":"pages/coro-context-switches.mdx#paired-context-switches","48":"pages/coro-io.mdx#coro-api","49":"pages/coro-io.mdx#io","50":"pages/coro-io.mdx#performing-io-operations","51":"pages/coro-io.mdx#cancellations","52":"pages/coro-scheduler.mdx#coro-api","53":"pages/coro-scheduler.mdx#scheduler","54":"pages/coro-scheduler.mdx#initializing-scheduler-instance","55":"pages/coro-scheduler.mdx#spawning-tasks","56":"pages/coro-scheduler.mdx#collecting-result-from-a-task","57":"pages/coro-scheduler.mdx#running","58":"pages/#overview","59":"pages/#features","60":"pages/#support-matrix","61":"pages/integration.mdx#integrating-zig-aio","62":"pages/integration.mdx#zig-package-manager","63":"pages/integration.mdx#fetching-and-updating-the-zig-aio-dependency","64":"pages/integration.mdx#using-zig-aio-modules-in-zig-project","65":"pages/integration.mdx#using-zig-aio-in-zig-code"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[2,1,1],"1":[2,2,19],"2":[3,4,42],"3":[2,4,41],"4":[2,4,62],"5":[1,4,54],"6":[2,1,1],"7":[2,2,13],"8":[4,4,31],"9":[3,4,10],"10":[2,7,72],"11":[2,7,83],"12":[2,1,1],"13":[1,2,46],"14":[2,3,62],"15":[1,3,18],"16":[1,3,12],"17":[1,3,46],"18":[1,3,29],"19":[1,3,32],"20":[1,3,17],"21":[1,3,13],"22":[1,3,14],"23":[1,3,17],"24":[1,3,12],"25":[1,3,12],"26":[1,3,11],"27":[1,3,30],"28":[1,3,7],"29":[1,3,7],"30":[1,3,16],"31":[1,3,26],"32":[1,3,8],"33":[1,3,16],"34":[1,3,18],"35":[1,3,28],"36":[1,3,19],"37":[1,3,20],"38":[1,3,16],"39":[1,3,7],"40":[1,3,37],"41":[1,3,40],"42":[1,3,13],"43":[2,1,1],"44":[3,2,36],"45":[1,5,49],"46":[2,1,1],"47":[3,2,82],"48":[2,1,1],"49":[1,2,71],"50":[3,3,168],"51":[1,3,39],"52":[2,1,1],"53":[1,2,33],"54":[3,3,27],"55":[2,3,77],"56":[5,3,28],"57":[1,3,73],"58":[1,1,61],"59":[1,1,31],"60":[2,1,49],"61":[3,1,1],"62":[3,3,1],"63":[7,6,18],"64":[6,6,32],"65":[5,6,16]},"averageFieldLength":[1.8181818181818181,2.9393939393939394,29.924242424242426],"storedFields":{"0":{"href":"/aio-dynamic#aio-api","html":"</header>\n","isPage":true,"text":"\n","title":"AIO API","titles":[]},"1":{"href":"/aio-dynamic#dynamic-io","html":"\n<p>In case the amount of IO operations isn&#x27;t known ahead of time the dynamic api can be used.</p>\n","isPage":false,"text":"\nIn case the amount of IO operations isn&#x27;t known ahead of time the dynamic api can be used.\n","title":"Dynamic IO","titles":["AIO API"]},"2":{"href":"/aio-dynamic#initializing-dynamic-instance","html":"\n<p>Creating a Dynamic instance requires an allocator and upper bound for non-completed operations.\nThe instance allocates only during the <code>init</code>, and frees the memory during <code>deinit</code>.\nSame allocator must be used in <code>deinit</code> that was used in <code>init</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> max_operations</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> work</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Dynamic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">init</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">heap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">page_allocator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">max_operations</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">defer</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> work</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deinit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">heap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">page_allocator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nCreating a Dynamic instance requires an allocator and upper bound for non-completed operations.\nThe instance allocates only during the init, and frees the memory during deinit.\nSame allocator must be used in deinit that was used in init.\nconst max_operations = 32;\nvar work = try Dynamic.init(std.heap.page_allocator, max_operations);\ndefer work.deinit(std.heap.page_allocator);\n","title":"Initializing Dynamic instance","titles":["AIO API","Dynamic IO"]},"3":{"href":"/aio-dynamic#queuing-operations","html":"\n<p>It is possible to queue either single or multiple operations just like with the immediate api.\nThe call to queue is atomic, if the call fails, none of the operations will be actually queued.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Multiple operations</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> work</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">queue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.{</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">op</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">read</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{...}, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">soft</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">op</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{...}, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">soft</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">op</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fsync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{...}, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">unlinked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, {});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Single operation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> work</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">queue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">op</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">timeout</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{...}, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">unlinked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), {});</span></span></code></pre>\n","isPage":false,"text":"\nIt is possible to queue either single or multiple operations just like with the immediate api.\nThe call to queue is atomic, if the call fails, none of the operations will be actually queued.\n// Multiple operations\ntry work.queue(.{\n    aio.op(.read, .{...}, .soft),\n    aio.op(.write, .{...}, .soft),\n    aio.op(.fsync, .{...}, .unlinked),\n}, {});\n \n// Single operation\ntry work.queue(aio.op(.timeout, .{...}, .unlinked), {});\n","title":"Queuing operations","titles":["AIO API","Dynamic IO"]},"4":{"href":"/aio-dynamic#completing-operations","html":"\n<p>It is possible to complete the operations either in blocking or non-blocking fashion.\nThe blocking mode will wait for at least one operation to complete.\nThe non-blocking always returns immediately even if no operations were completed.\nThe call to complete returns <code>aio.CompletionResult</code> containing the number of operations that were completed\nand the number of errors that occured.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// blocks until at least 1 operation completes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> work</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">complete</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">blocking</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// returns immediately</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> work</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">complete</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">nonblocking</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>To complete all operations within the dynamic instance, use <code>completeAll</code>.\nThis blocks until all the operations are complete and returns the number of errors, if any.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> num_errors</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> work</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">completeAll</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({});</span></span></code></pre>\n","isPage":false,"text":"\nIt is possible to complete the operations either in blocking or non-blocking fashion.\nThe blocking mode will wait for at least one operation to complete.\nThe non-blocking always returns immediately even if no operations were completed.\nThe call to complete returns aio.CompletionResult containing the number of operations that were completed\nand the number of errors that occured.\n// blocks until at least 1 operation completes\nconst res = try work.complete(.blocking);\n// returns immediately\nconst res = try work.complete(.nonblocking);\nTo complete all operations within the dynamic instance, use completeAll.\nThis blocks until all the operations are complete and returns the number of errors, if any.\nconst num_errors = try work.completeAll({});\n","title":"Completing operations","titles":["AIO API","Dynamic IO"]},"5":{"href":"/aio-dynamic#handler","html":"\n<p>It is possible to pass <code>handler</code> to some <code>aio.Dynamic</code> functions. If done so, the <code>handler</code> can implement the following funcitons:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Called whenever operation is queued in the Dynamic instance</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">aio_queue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">@This</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">userdata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">usize</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">void</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Called whenever operation completes</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">aio_complete</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">@This</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">userdata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">usize</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">failed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">void</span></span></code></pre>\n<p>This is for example used by the <code>coro.Scheduler</code> to link IO operations into tasks.</p>\n<p>If <code>handler</code> is <code>{}</code> (aka void), then the callback code is optimized out.</p>","isPage":false,"text":"\nIt is possible to pass handler to some aio.Dynamic functions. If done so, the handler can implement the following funcitons:\n// Called whenever operation is queued in the Dynamic instance\naio_queue(self: *@This(), id: aio.Id, userdata: usize) void\n// Called whenever operation completes\naio_complete(self: *@This(), id: aio.Id, userdata: usize, failed: bool) void\nThis is for example used by the coro.Scheduler to link IO operations into tasks.\nIf handler is {} (aka void), then the callback code is optimized out.","title":"Handler","titles":["AIO API","Dynamic IO"]},"6":{"href":"/aio-immediate#aio-api","html":"</header>\n","isPage":true,"text":"\n","title":"AIO API","titles":[]},"7":{"href":"/aio-immediate#immediate-io","html":"\n<p>For immediate blocking IO, <code>zig-aio</code> provides the following functions in the <code>aio</code> module.</p>\n","isPage":false,"text":"\nFor immediate blocking IO, zig-aio provides the following functions in the aio module.\n","title":"Immediate IO","titles":["AIO API"]},"8":{"href":"/aio-immediate#perform-a-single-operation","html":"\n<p>Completes a single operation, the call blocks until it&#x27;s complete.\nReturns error of the operation if the operation failed.\nReturns <code>void</code> if there was no error.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">single</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">file</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;contents&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> });</span></span></code></pre>\n","isPage":false,"text":"\nCompletes a single operation, the call blocks until it&#x27;s complete.\nReturns error of the operation if the operation failed.\nReturns void if there was no error.\ntry aio.single(.write, .{ .file = f, .buffer = &quot;contents&quot; });\n","title":"Perform a single operation","titles":["AIO API","Immediate IO"]},"9":{"href":"/aio-immediate#perform-multiple-operations","html":"\n<p><code>zig-aio</code> provides two methods for batching IO operations.</p>\n","isPage":false,"text":"\nzig-aio provides two methods for batching IO operations.\n","title":"Perform multiple operations","titles":["AIO API","Immediate IO"]},"10":{"href":"/aio-immediate#using-multi","html":"\n<p>Completes a list of operations immediately, blocks until complete.\nReturns <code>error.SomeOperationFailed</code> if any operation failed.\nReturns <code>void</code> if there were no errors.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> my_buffer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1024</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u8</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> my_len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">usize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">multi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.{</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">op</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">file</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;contents&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">soft</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">op</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">read</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">file</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">my_buffer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_read</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">my_len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">unlinked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span></code></pre>\n<p>The <code>.link</code> field of operation can be used to link the operation to the next operation.\nWhen linking operations, the next operation won&#x27;t start until this operation is complete.</p>\n<p><code>soft</code> link will propagate failure to next operations in the link chain.\n<code>hard</code> link will not propagate failure, and the next operation starts normally.</p>\n","isPage":false,"text":"\nCompletes a list of operations immediately, blocks until complete.\nReturns error.SomeOperationFailed if any operation failed.\nReturns void if there were no errors.\nvar my_buffer: [1024]u8 = undefined;\nvar my_len: usize = undefined;\n \ntry aio.multi(.{\n    aio.op(.write, .{ .file = f, .buffer = &quot;contents&quot; }, .soft),\n    aio.op(.read, .{ .file = f, .buffer = &amp;my_buffer, .out_read = &amp;my_len }, .unlinked),\n});\nThe .link field of operation can be used to link the operation to the next operation.\nWhen linking operations, the next operation won&#x27;t start until this operation is complete.\nsoft link will propagate failure to next operations in the link chain.\nhard link will not propagate failure, and the next operation starts normally.\n","title":"Using multi","titles":["AIO API","Immediate IO","Perform multiple operations"]},"11":{"href":"/aio-immediate#using-complete","html":"\n<p>Complete is similar to multi, but it will not return <code>error.SomeOperationFailed</code> in case any of the operations fail.\nInstead complete returns the number of errors occured. To find out which operations failed, errors have to be stored\nsomewhere by setting the <code>.out_error</code> field of the operation. The complete call may still fail in implementation\ndefined ways, such as running out of system resources.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> my_buffer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1024</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u8</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> my_len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">usize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> write_error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Error</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> read_error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Read</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Error</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">complete</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.{</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">op</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">file</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;contents&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_error</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">write_error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">soft</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">op</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">read</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">file</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">my_buffer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_read</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">my_len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_error</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">read_error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">unlinked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">res</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">num_errors</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">write_error</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Success</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">@panic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;write failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">read_error</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Success</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">@panic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;read failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nComplete is similar to multi, but it will not return error.SomeOperationFailed in case any of the operations fail.\nInstead complete returns the number of errors occured. To find out which operations failed, errors have to be stored\nsomewhere by setting the .out_error field of the operation. The complete call may still fail in implementation\ndefined ways, such as running out of system resources.\nvar my_buffer: [1024]u8 = undefined;\nvar my_len: usize = undefined;\nvar write_error: aio.Write.Error = undefined;\nvar read_error: aio.Read.Error = undefined;\n \nconst res = try aio.complete(.{\n    aio.op(.write, .{ .file = f, .buffer = &quot;contents&quot;, .out_error = &amp;write_error }, .soft),\n    aio.op(.read, .{ .file = f, .buffer = &amp;my_buffer, .out_read = &amp;my_len, .out_error = &amp;read_error }, .unlinked),\n});\n \nif (res.num_errors &gt; 0) {\n    if (write_error != error.Success) @panic(&quot;write failed&quot;);\n    if (read_error != error.Success) @panic(&quot;read failed&quot;);\n}","title":"Using complete","titles":["AIO API","Immediate IO","Perform multiple operations"]},"12":{"href":"/aio-operations#aio-api","html":"</header>\n","isPage":true,"text":"\n","title":"AIO API","titles":[]},"13":{"href":"/aio-operations#operations","html":"\n<p>A handful of IO operations are supported.\nAll the pointer arguments in operations must remain stable until the operation has been completed.</p>\n<p><code>link</code> can be used to link the next operation into this operation.\nWhen operations are linked, the next operation won&#x27;t start until this operation has completed first.\n<code>soft</code> link will propagate failure to next operations in the link chain.\n<code>hard</code> link will not propagate failure, and the next operation starts normally.</p>\n","isPage":false,"text":"\nA handful of IO operations are supported.\nAll the pointer arguments in operations must remain stable until the operation has been completed.\nlink can be used to link the next operation into this operation.\nWhen operations are linked, the next operation won&#x27;t start until this operation has completed first.\nsoft link will propagate failure to next operations in the link chain.\nhard link will not propagate failure, and the next operation starts normally.\n","title":"Operations","titles":["AIO API"]},"14":{"href":"/aio-operations#common-fields","html":"\n<p>Every operation supports these common fields.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Id</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Operation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Error</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">userdata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">usize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n<p>If <code>out_id</code> is set, the id of the operation will be stored into that address immediately after sucessful queue.\nThe <code>id</code> can then be used in future operations to refer to this operation.</p>\n<p>If <code>out_error</code> is set, the error of the operation will be stored into that address, in case the operation failed.\nIf there was no failure a <code>error.Success</code> will be stored in that address.</p>\n<p><code>userdata</code> is not interpreted or modified any way, it can be used to link the operations to application specific context.</p>\n","isPage":false,"text":"\nEvery operation supports these common fields.\nout_id: ?*Id = null,\nout_error: ?*Operation.Error = null,\nuserdata: usize = 0,\nIf out_id is set, the id of the operation will be stored into that address immediately after sucessful queue.\nThe id can then be used in future operations to refer to this operation.\nIf out_error is set, the error of the operation will be stored into that address, in case the operation failed.\nIf there was no failure a error.Success will be stored in that address.\nuserdata is not interpreted or modified any way, it can be used to link the operations to application specific context.\n","title":"Common fields","titles":["AIO API","Operations"]},"15":{"href":"/aio-operations#nop","html":"\n<p>Can be used to wakeup the backend, custom notifications, etc...</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Error</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> SharedError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">ident</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">usize</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nCan be used to wakeup the backend, custom notifications, etc...\npub const Error = SharedError;\nident: usize,\n","title":"Nop","titles":["AIO API","Operations"]},"16":{"href":"/aio-operations#fsync","html":"\n<p>Synchronizes the contents of a <code>file</code> onto the disk.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">file</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">File</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nSynchronizes the contents of a file onto the disk.\nfile: std.fs.File,\n","title":"Fsync","titles":["AIO API","Operations"]},"17":{"href":"/aio-operations#readtty","html":"\n<p>Reads a tty device pointed by <code>file</code> into a <code>buffer</code>.\nThe amount of bytes read is stored in the location pointed by <code>out_read</code>.\nIf <code>mode.translation</code> is given a <code>TranslationState</code>, then the input on windows will be translated to VT sequences. (currently unimplemented)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">tty</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">File</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_read</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*usize</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">mode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Mode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">direct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nReads a tty device pointed by file into a buffer.\nThe amount of bytes read is stored in the location pointed by out_read.\nIf mode.translation is given a TranslationState, then the input on windows will be translated to VT sequences. (currently unimplemented)\ntty: std.fs.File,\nbuffer: []u8,\nout_read: *usize,\nmode: Mode = .direct,\n","title":"ReadTty","titles":["AIO API","Operations"]},"18":{"href":"/aio-operations#read","html":"\n<p>Reads a <code>file</code> into a <code>buffer</code> from a <code>offset</code>.\nThe amount of bytes read is stored in the location pointed by <code>out_read</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">file</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">File</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">offset</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u64</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_read</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*usize</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nReads a file into a buffer from a offset.\nThe amount of bytes read is stored in the location pointed by out_read.\nfile: std.fs.File,\nbuffer: []u8,\noffset: u64 = 0,\nout_read: *usize,\n","title":"Read","titles":["AIO API","Operations"]},"19":{"href":"/aio-operations#write","html":"\n<p>Writes contents of <code>buffer</code> from <code>offset</code> into a <code>file</code>.\nThe amount of bytes written is stored in the location pointed by <code>out_written</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">file</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">File</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">offset</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u64</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_written</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?*usize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nWrites contents of buffer from offset into a file.\nThe amount of bytes written is stored in the location pointed by out_written.\nfile: std.fs.File,\nbuffer: []const u8,\noffset: u64 = 0,\nout_written: ?*usize = null,\n","title":"Write","titles":["AIO API","Operations"]},"20":{"href":"/aio-operations#accept","html":"\n<p>See <code>man accept(2)</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">addr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">sockaddr</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">inout_addrlen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socklen_t</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nSee man accept(2)\nsocket: std.posix.socket_t,\naddr: ?*std.posix.sockaddr = null,\ninout_addrlen: ?*std.posix.socklen_t = null,\nout_socket: *std.posix.socket_t,\n","title":"Accept","titles":["AIO API","Operations"]},"21":{"href":"/aio-operations#connect","html":"\n<p>See <code>man connect(2)</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">addr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">sockaddr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">addrlen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socklen_t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nSee man connect(2)\nsocket: std.posix.socket_t,\naddr: *std.posix.sockaddr,\naddrlen: std.posix.socklen_t,\n","title":"Connect","titles":["AIO API","Operations"]},"22":{"href":"/aio-operations#recv","html":"\n<p>See <code>man recv(2)</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_read</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*usize</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nSee man recv(2)\nsocket: std.posix.socket_t,\nbuffer: []u8,\nout_read: *usize,\n","title":"Recv","titles":["AIO API","Operations"]},"23":{"href":"/aio-operations#send","html":"\n<p>See <code>man send(2)</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_written</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?*usize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nSee man send(2)\nsocket: std.posix.socket_t,\nbuffer: []const u8,\nout_written: ?*usize = null,\n","title":"Send","titles":["AIO API","Operations"]},"24":{"href":"/aio-operations#recvmsg","html":"\n<p>See <code>man recvmsg(2)</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_msg</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">msghdr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nSee man recvmsg(2)\nsocket: std.posix.socket_t,\nout_msg: *posix.msghdr,\n","title":"RecvMsg","titles":["AIO API","Operations"]},"25":{"href":"/aio-operations#sendmsg","html":"\n<p>See <code>man sendmsg(2)</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">msg</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">msghdr_const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nSee man sendmsg(2)\nsocket: std.posix.socket_t,\nmsg: *const posix.msghdr_const,\n","title":"SendMsg","titles":["AIO API","Operations"]},"26":{"href":"/aio-operations#shutdown","html":"\n<p>See <code>man shutdown(2)</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">how</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ShutdownHow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nSee man shutdown(2)\nsocket: std.posix.socket_t,\nhow: std.posix.ShutdownHow,\n","title":"Shutdown","titles":["AIO API","Operations"]},"27":{"href":"/aio-operations#openat","html":"\n<p>Opens <code>path</code> relative to a <code>dir</code>, opening is customized by <code>flags</code>.\nThe opened file is stored into the location pointed by <code>out_file</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">path</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">flags</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">File</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">OpenFlags</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> .{},</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_file</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">File</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nOpens path relative to a dir, opening is customized by flags.\nThe opened file is stored into the location pointed by out_file.\ndir: std.fs.Dir,\npath: [*:0]const u8,\nflags: std.fs.File.OpenFlags = .{},\nout_file: *std.fs.File,\n","title":"OpenAt","titles":["AIO API","Operations"]},"28":{"href":"/aio-operations#closefile","html":"\n<p>Closes a <code>file</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">file</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">File</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nCloses a file.\nfile: std.fs.File,\n","title":"CloseFile","titles":["AIO API","Operations"]},"29":{"href":"/aio-operations#closedir","html":"\n<p>Closes a <code>dir</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nCloses a dir.\ndir: std.fs.Dir,\n","title":"CloseDir","titles":["AIO API","Operations"]},"30":{"href":"/aio-operations#timeout","html":"\n<p>Starts a timeout. Once the timeout expires the operation completes.\nThe timeout uses a monotonic clock source.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">ns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">i128</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nStarts a timeout. Once the timeout expires the operation completes.\nThe timeout uses a monotonic clock source.\nns: i128,\n","title":"Timeout","titles":["AIO API","Operations"]},"31":{"href":"/aio-operations#linktimeout","html":"\n<p>Timeout linked to a operation.\nThe operation before must have set <code>link</code> to either <code>soft</code> or <code>hard</code>.\nIf the operation finishes before the timeout, then the timeout will be canceled.\nIf the timeout finishes before the operation, then the operation will be canceled.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">ns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">i128</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nTimeout linked to a operation.\nThe operation before must have set link to either soft or hard.\nIf the operation finishes before the timeout, then the timeout will be canceled.\nIf the timeout finishes before the operation, then the operation will be canceled.\nns: i128,\n","title":"LinkTimeout","titles":["AIO API","Operations"]},"32":{"href":"/aio-operations#cancel","html":"\n<p>Cancel existing operation referenced by <code>id</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nCancel existing operation referenced by id.\nid: Id,\n","title":"Cancel","titles":["AIO API","Operations"]},"33":{"href":"/aio-operations#renameat","html":"\n<p>Rename a <code>old_path</code> relative to <code>old_dir</code> into <code>new_path</code> relative to <code>new_dir</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">old_dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">old_path</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">new_dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">new_path</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nRename a old_path relative to old_dir into new_path relative to new_dir.\nold_dir: std.fs.Dir,\nold_path: [*:0]const u8,\nnew_dir: std.fs.Dir,\nnew_path: [*:0]const u8,\n","title":"RenameAt","titles":["AIO API","Operations"]},"34":{"href":"/aio-operations#unlinkat","html":"\n<p>Delete a file or directory locating in <code>path</code> relative to <code>dir</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">path</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nDelete a file or directory locating in path relative to dir.\ndir: std.fs.Dir,\npath: [*:0]const u8,\n","title":"UnlinkAt","titles":["AIO API","Operations"]},"35":{"href":"/aio-operations#mkdirat","html":"\n<p>Create directory relative to <code>dir</code> at <code>path</code>.\nThe <code>mode</code> parameter can specify the mode of the directory on supporting operating systems.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">path</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">mode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u32</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">default_mode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nCreate directory relative to dir at path.\nThe mode parameter can specify the mode of the directory on supporting operating systems.\ndir: std.fs.Dir,\npath: [*:0]const u8,\nmode: u32 = std.fs.Dir.default_mode,\n","title":"MkDirAt","titles":["AIO API","Operations"]},"36":{"href":"/aio-operations#symlinkat","html":"\n<p>Create a symlink relative to <code>dir</code> at <code>link_path</code> linking to the <code>target</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">target</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">link_path</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nCreate a symlink relative to dir at link_path linking to the target.\ndir: std.fs.Dir,\ntarget: [*:0]const u8,\nlink_path: [*:0]const u8,\n","title":"SymlinkAt","titles":["AIO API","Operations"]},"37":{"href":"/aio-operations#childexit","html":"\n<p>Waits for a child process to exit and collects its exit status.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">child</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">process</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Child</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_term</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">process</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Child</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Term</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nWaits for a child process to exit and collects its exit status.\nchild: std.process.Child.Id,\nout_term: ?*std.process.Child.Term = null,\n","title":"ChildExit","titles":["AIO API","Operations"]},"38":{"href":"/aio-operations#socket","html":"\n<p>See <code>man socket(2)</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// std.posix.AF</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">domain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// std.posix.SOCK</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">flags</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// std.posix.IPPROTO</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">protocol</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nSee man socket(2)\n/// std.posix.AF\ndomain: u32,\n/// std.posix.SOCK\nflags: u32,\n/// std.posix.IPPROTO\nprotocol: u32,\nout_socket: *std.posix.socket_t,\n","title":"Socket","titles":["AIO API","Operations"]},"39":{"href":"/aio-operations#closesocket","html":"\n<p>Closes a <code>socket</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nCloses a socket.\nsocket: std.posix.socket_t,\n","title":"CloseSocket","titles":["AIO API","Operations"]},"40":{"href":"/aio-operations#notifyeventsource","html":"\n<p>Notifies a event source.\nEvent sources have a Semaphore semantics, meaning there is a internal counter which is incremented by every notification.\nThe event source is signaled as ready until the counter is fully drained by either using <code>aio.WaitEventSource</code> or directly with\n<code>source.wait()</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">source</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">EventSource</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nNotifies a event source.\nEvent sources have a Semaphore semantics, meaning there is a internal counter which is incremented by every notification.\nThe event source is signaled as ready until the counter is fully drained by either using aio.WaitEventSource or directly with\nsource.wait().\nsource: *aio.EventSource,\n","title":"NotifyEventSource","titles":["AIO API","Operations"]},"41":{"href":"/aio-operations#waiteventsource","html":"\n<p>Waits for a event source to signal ready.\nEvent sources have a Semaphore semantics, meaning there is a internal counter which is incremented by every notification.\nThe event source is signaled as ready until the counter is fully drained by either using <code>aio.WaitEventSource</code> or directly with\n<code>source.wait()</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">source</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">EventSource</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>\n","isPage":false,"text":"\nWaits for a event source to signal ready.\nEvent sources have a Semaphore semantics, meaning there is a internal counter which is incremented by every notification.\nThe event source is signaled as ready until the counter is fully drained by either using aio.WaitEventSource or directly with\nsource.wait().\nsource: *aio.EventSource,\n","title":"WaitEventSource","titles":["AIO API","Operations"]},"42":{"href":"/aio-operations#closeeventsource","html":"\n<p>Closes a event source. This is same as calling <code>source.deinit()</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">source</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">EventSource</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span></code></pre>","isPage":false,"text":"\nCloses a event source. This is same as calling source.deinit().\nsource: *aio.EventSource,","title":"CloseEventSource","titles":["AIO API","Operations"]},"43":{"href":"/coro-blocking-code#coro-api","html":"</header>\n","isPage":true,"text":"\n","title":"CORO API","titles":[]},"44":{"href":"/coro-blocking-code#mixing-blocking-code","html":"\n<p>Sometimes it&#x27;s not feasible to rewrite blocking code so that it plays nice with the <code>coro.Scheduler</code>.\nIn that kind of scenario it is possible to use <code>coro.ThreadPool</code> to allow tasks to yield until blocking code\nfinishes on a worker thread.</p>\n","isPage":false,"text":"\nSometimes it&#x27;s not feasible to rewrite blocking code so that it plays nice with the coro.Scheduler.\nIn that kind of scenario it is possible to use coro.ThreadPool to allow tasks to yield until blocking code\nfinishes on a worker thread.\n","title":"Mixing blocking code","titles":["CORO API"]},"45":{"href":"/coro-blocking-code#example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> blockingCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sleep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ns_per_s</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 69</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">pool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ThreadPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> ret</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> pool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">yieldForCompletion</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">blockingCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">testing</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectEqual</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">69</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ret</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> Scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">init</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">testing</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">allocator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">defer</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deinit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> pool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ThreadPool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> ThreadPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">init</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">testing</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">allocator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">defer</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> pool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deinit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// pool must always be destroyed before scheduler</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">_</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">spawn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">pool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, .{});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Or alternatively, which does the same as above</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">_</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> pool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">spawnForCompletion</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">blockingCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>","isPage":false,"text":"\nfn blockingCode() u32 {\n    std.time.sleep(1 * std.time.ns_per_s);\n    return 69;\n}\n \nfn task(pool: *ThreadPool) !void {\n    const ret = try pool.yieldForCompletion(blockingCode, .{});\n    try std.testing.expectEqual(69, ret);\n}\n \nvar scheduler = try Scheduler.init(std.testing.allocator, .{});\ndefer scheduler.deinit();\n \nvar pool: ThreadPool = try ThreadPool.init(std.testing.allocator, .{});\ndefer pool.deinit(); // pool must always be destroyed before scheduler\n \n_ = try scheduler.spawn(task, .{&amp;pool}, .{});\n \n// Or alternatively, which does the same as above\n_ = try pool.spawnForCompletion(&amp;scheduler, blockingCode, .{});\n \ntry scheduler.run(.wait);","title":"Example","titles":["CORO API","Mixing blocking code"]},"46":{"href":"/coro-context-switches#coro-api","html":"</header>\n","isPage":true,"text":"\n","title":"CORO API","titles":[]},"47":{"href":"/coro-context-switches#paired-context-switches","html":"\n<p>To yield running task to the caller use the following.\nThe function takes a enum value as a argument representing the yield state of the task.\nEnum value that corresponds to the integer <code>0</code> is resevered to indicate non yield state.\nYielding may return the <code>error.Canceled</code> if the task has been canceled.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">yield</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SomeEnum</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>The current yield state of a task can be checked with <code>state</code> method.\nTo wakeup a task use the <code>wakeup</code> method. When task is woken up the yield state is reset to <code>0</code>.\nCalling <code>wakeup</code> when the task isn&#x27;t yielded by application&#x27;s yield state is a error.</p>\n<p>Example of checking the current yield state and then waking up the task.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">switch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">state</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SomeEnum</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)) {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">wakeup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Shorthand for waking up task when the state is as expected.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">wakeupIf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SomeEnum</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>Trying to wakeup a task that was not yielded by the user code is an programming error.</p>","isPage":false,"text":"\nTo yield running task to the caller use the following.\nThe function takes a enum value as a argument representing the yield state of the task.\nEnum value that corresponds to the integer 0 is resevered to indicate non yield state.\nYielding may return the error.Canceled if the task has been canceled.\ntry coro.yield(SomeEnum.value);\nThe current yield state of a task can be checked with state method.\nTo wakeup a task use the wakeup method. When task is woken up the yield state is reset to 0.\nCalling wakeup when the task isn&#x27;t yielded by application&#x27;s yield state is a error.\nExample of checking the current yield state and then waking up the task.\nswitch (task.state(SomeEnum)) {\n    value =&gt; task.wakeup(),\n}\nShorthand for waking up task when the state is as expected.\ntask.wakeupIf(Task.SomeEnum);\nTrying to wakeup a task that was not yielded by the user code is an programming error.","title":"Paired context switches","titles":["CORO API"]},"48":{"href":"/coro-io#coro-api","html":"</header>\n","isPage":true,"text":"\n","title":"CORO API","titles":[]},"49":{"href":"/coro-io#io","html":"\n<p>Inside a task it is possible to use the IO functions inside the <code>coro.io</code> namespace to perform cooperative\nIO with the <code>Scheduler</code>. When calling a <code>coro.io</code> operation from a task, the task setups some internal state,\nqueues the IO operations for <code>Scheduler</code> and then yields, allowing other code to run in the program.</p>\n<p>All the IO operations are merged into one <code>aio.Dynamic</code> instance for completion during the next scheduler tick.\nWhile this may not be beneficial on all backends, the io_uring backend allows the kernel to execute all\nthe yielding tasks IO operations with a single syscall.</p>\n","isPage":false,"text":"\nInside a task it is possible to use the IO functions inside the coro.io namespace to perform cooperative\nIO with the Scheduler. When calling a coro.io operation from a task, the task setups some internal state,\nqueues the IO operations for Scheduler and then yields, allowing other code to run in the program.\nAll the IO operations are merged into one aio.Dynamic instance for completion during the next scheduler tick.\nWhile this may not be beneficial on all backends, the io_uring backend allows the kernel to execute all\nthe yielding tasks IO operations with a single syscall.\n","title":"IO","titles":["CORO API"]},"50":{"href":"/coro-io#performing-io-operations","html":"\n<p>Performing operations is similar to <code>aio</code> module. The api is the same, but instead use the <code>coro.io</code> namespace.\nBelow is a full example of simple server / client program using the <code>coro</code> api. If <code>coro.io</code> functions are used\noutside a task then the call would be equal to calling the equal function from the <code>aio</code> module.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> @import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;std&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> aio</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> @import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;aio&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> @import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;coro&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">scoped</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">coro_aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std_options</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Options</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> .{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log_level</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">debug</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> server</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">startup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ResetEvent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">io</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">single</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">domain</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">AF</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">INET</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">flags</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SOCK</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">STREAM</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SOCK</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">CLOEXEC</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">protocol</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">IPPROTO</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">TCP</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">net</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">initIp4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.{ </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1327</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setsockopt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SOL</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SOCKET</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SO</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">REUSEADDR</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">mem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">@as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">c_int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">@hasDecl</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SO</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;REUSEPORT&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setsockopt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SOL</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SOCKET</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SO</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">REUSEPORT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">mem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">@as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">c_int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">bind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getOsSockLen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">listen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">128</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    startup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> client_sock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">io</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">single</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">accept</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">client_sock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1024</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u8</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">usize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">io</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">multi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.{</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">        aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">op</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> client_sock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;hey &quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">soft</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">        aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">op</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> client_sock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;I&#x27;m doing multiple IO ops at once &quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">soft</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">        aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">op</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> client_sock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;how cool is that?&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">soft</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">        aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">op</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">recv</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> client_sock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_read</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">unlinked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">warn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;got reply from client: {s}&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">..</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">io</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">multi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.{</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">        aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">op</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> client_sock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;ok bye&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">soft</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">        aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">op</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">close_socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> client_sock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">soft</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">        aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">op</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">close_socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">unlinked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> client</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">startup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ResetEvent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket_t</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">io</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">single</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">domain</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">AF</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">INET</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">flags</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SOCK</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">STREAM</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">SOCK</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">CLOEXEC</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">protocol</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">posix</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">IPPROTO</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">TCP</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> startup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">net</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">initIp4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.{ </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">127</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1327</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">io</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">single</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">addr</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">addrlen</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getOsSockLen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    while</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1024</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u8</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">usize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">io</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">single</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">recv</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_read</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> });</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">        log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">warn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;got reply from server: {s}&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">..</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">mem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">indexOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">..</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;how cool is that?&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">|</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">_</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">|</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> break</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">io</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">single</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;dude, I don&#x27;t care&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1024</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u8</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">usize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">io</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">single</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">recv</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{ .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">socket</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> socket</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_read</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> });</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">warn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;got final words from server: {s}&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">..</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]});</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // var mem: [4096 * 1024]u8 = undefined;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // var fba = std.heap.FixedBufferAllocator.init(&amp;mem);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> gpa</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">heap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">GeneralPurposeAllocator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.{}) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> .{};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> _</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> gpa</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deinit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">init</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">gpa</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">allocator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), .{});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deinit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> startup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ResetEvent</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> .{};</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    _</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">spawn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">client</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">startup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, .{});</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    _</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">spawn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">server</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">startup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, .{});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nPerforming operations is similar to aio module. The api is the same, but instead use the coro.io namespace.\nBelow is a full example of simple server / client program using the coro api. If coro.io functions are used\noutside a task then the call would be equal to calling the equal function from the aio module.\nconst std = @import(&quot;std&quot;);\nconst aio = @import(&quot;aio&quot;);\nconst coro = @import(&quot;coro&quot;);\nconst log = std.log.scoped(.coro_aio);\n \npub const std_options: std.Options = .{\n    .log_level = .debug,\n};\n \nfn server(startup: *coro.ResetEvent) !void {\n    var socket: std.posix.socket_t = undefined;\n    try coro.io.single(.socket, .{\n        .domain = std.posix.AF.INET,\n        .flags = std.posix.SOCK.STREAM | std.posix.SOCK.CLOEXEC,\n        .protocol = std.posix.IPPROTO.TCP,\n        .out_socket = &amp;socket,\n    });\n \n    const address = std.net.Address.initIp4(.{ 0, 0, 0, 0 }, 1327);\n    try std.posix.setsockopt(socket, std.posix.SOL.SOCKET, std.posix.SO.REUSEADDR, &amp;std.mem.toBytes(@as(c_int, 1)));\n    if (@hasDecl(std.posix.SO, &quot;REUSEPORT&quot;)) {\n        try std.posix.setsockopt(socket, std.posix.SOL.SOCKET, std.posix.SO.REUSEPORT, &amp;std.mem.toBytes(@as(c_int, 1)));\n    }\n    try std.posix.bind(socket, &amp;address.any, address.getOsSockLen());\n    try std.posix.listen(socket, 128);\n \n    startup.set();\n \n    var client_sock: std.posix.socket_t = undefined;\n    try coro.io.single(.accept, .{ .socket = socket, .out_socket = &amp;client_sock });\n \n    var buf: [1024]u8 = undefined;\n    var len: usize = 0;\n    try coro.io.multi(.{\n        aio.op(.send, .{ .socket = client_sock, .buffer = &quot;hey &quot; }, .soft),\n        aio.op(.send, .{ .socket = client_sock, .buffer = &quot;I&#x27;m doing multiple IO ops at once &quot; }, .soft),\n        aio.op(.send, .{ .socket = client_sock, .buffer = &quot;how cool is that?&quot; }, .soft),\n        aio.op(.recv, .{ .socket = client_sock, .buffer = &amp;buf, .out_read = &amp;len }, .unlinked),\n    });\n \n    log.warn(&quot;got reply from client: {s}&quot;, .{buf[0..len]});\n    try coro.io.multi(.{\n        aio.op(.send, .{ .socket = client_sock, .buffer = &quot;ok bye&quot; }, .soft),\n        aio.op(.close_socket, .{ .socket = client_sock }, .soft),\n        aio.op(.close_socket, .{ .socket = socket }, .unlinked),\n    });\n}\n \nfn client(startup: *coro.ResetEvent) !void {\n    var socket: std.posix.socket_t = undefined;\n    try coro.io.single(.socket, .{\n        .domain = std.posix.AF.INET,\n        .flags = std.posix.SOCK.STREAM | std.posix.SOCK.CLOEXEC,\n        .protocol = std.posix.IPPROTO.TCP,\n        .out_socket = &amp;socket,\n    });\n \n    try startup.wait();\n \n    const address = std.net.Address.initIp4(.{ 127, 0, 0, 1 }, 1327);\n    try coro.io.single(.connect, .{\n        .socket = socket,\n        .addr = &amp;address.any,\n        .addrlen = address.getOsSockLen(),\n    });\n \n    while (true) {\n        var buf: [1024]u8 = undefined;\n        var len: usize = 0;\n        try coro.io.single(.recv, .{ .socket = socket, .buffer = &amp;buf, .out_read = &amp;len });\n        log.warn(&quot;got reply from server: {s}&quot;, .{buf[0..len]});\n        if (std.mem.indexOf(u8, buf[0..len], &quot;how cool is that?&quot;)) |_| break;\n    }\n \n    try coro.io.single(.send, .{ .socket = socket, .buffer = &quot;dude, I don&#x27;t care&quot; });\n \n    var buf: [1024]u8 = undefined;\n    var len: usize = 0;\n    try coro.io.single(.recv, .{ .socket = socket, .buffer = &amp;buf, .out_read = &amp;len });\n    log.warn(&quot;got final words from server: {s}&quot;, .{buf[0..len]});\n}\n \npub fn main() !void {\n    // var mem: [4096 * 1024]u8 = undefined;\n    // var fba = std.heap.FixedBufferAllocator.init(&amp;mem);\n    var gpa: std.heap.GeneralPurposeAllocator(.{}) = .{};\n    defer _ = gpa.deinit();\n    var scheduler = try coro.Scheduler.init(gpa.allocator(), .{});\n    defer scheduler.deinit();\n    var startup: coro.ResetEvent = .{};\n    _ = try scheduler.spawn(client, .{&amp;startup}, .{});\n    _ = try scheduler.spawn(server, .{&amp;startup}, .{});\n    try scheduler.run(.wait);\n}\n","title":"Performing io operations","titles":["CORO API","IO"]},"51":{"href":"/coro-io#cancellations","html":"\n<p>Use <code>aio.Cancel</code> operation to cancel the currently running operations in a task.\nThe <code>out_error</code> of such operation will then be set as <code>error.Canceled</code>.</p>\n<p>Alternatively it&#x27;s possible to call <code>task.cancel()</code>, or <code>task.complete(.cancel);</code> to actively cancel a task and collect its partial result.</p>","isPage":false,"text":"\nUse aio.Cancel operation to cancel the currently running operations in a task.\nThe out_error of such operation will then be set as error.Canceled.\nAlternatively it&#x27;s possible to call task.cancel(), or task.complete(.cancel); to actively cancel a task and collect its partial result.","title":"Cancellations","titles":["CORO API","IO"]},"52":{"href":"/coro-scheduler#coro-api","html":"</header>\n","isPage":true,"text":"\n","title":"CORO API","titles":[]},"53":{"href":"/coro-scheduler#scheduler","html":"\n<p>To do a non-blocking IO while still maintaining the imperative blocking style of coding.\nWe need a coroutines and a scheduler that schedules the context switches of said coroutines.\nIn this guide we refer to the coroutines as tasks.</p>\n","isPage":false,"text":"\nTo do a non-blocking IO while still maintaining the imperative blocking style of coding.\nWe need a coroutines and a scheduler that schedules the context switches of said coroutines.\nIn this guide we refer to the coroutines as tasks.\n","title":"Scheduler","titles":["CORO API"]},"54":{"href":"/coro-scheduler#initializing-scheduler-instance","html":"\n<p>Scheduler requires an <code>allocator</code> and optional <code>InitOptions</code>.\nThe scheduler stores the <code>allocator</code> and uses it for managed task creation and destruction.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">init</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">gpa</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">allocator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), .{});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">defer</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deinit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n","isPage":false,"text":"\nScheduler requires an allocator and optional InitOptions.\nThe scheduler stores the allocator and uses it for managed task creation and destruction.\nvar scheduler = try coro.Scheduler.init(gpa.allocator(), .{});\ndefer scheduler.deinit();\n","title":"Initializing Scheduler instance","titles":["CORO API","Scheduler"]},"55":{"href":"/coro-scheduler#spawning-tasks","html":"\n<p>A new task can be spawned by specifying <code>entrypoint</code>.\nSupply arguments to the <code>entrypoint</code> by providing a tuple as the second parameter.\nThe third parameter takes a optional <code>SpawnOptions</code>, which can be used to specify the stack size of the Task, or\nprovide a pre-allocated unmanaged stack.</p>\n<p>When task is spawned, the <code>entrypoint</code> is immediately called and the code in the <code>entrypoint</code> runs until the task either\nyields or performs a IO operation using one of the <code>coro.io</code> namespace functions.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> task</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">spawn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">entrypoint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{ </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;args&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, .{});</span></span></code></pre>\n<p>In case the return type of the function can not be deduced by the compiler, use the <code>spawnAny</code> variant.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> task</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">spawnAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">entrypoint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{ </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;args&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, .{});</span></span></code></pre>\n","isPage":false,"text":"\nA new task can be spawned by specifying entrypoint.\nSupply arguments to the entrypoint by providing a tuple as the second parameter.\nThe third parameter takes a optional SpawnOptions, which can be used to specify the stack size of the Task, or\nprovide a pre-allocated unmanaged stack.\nWhen task is spawned, the entrypoint is immediately called and the code in the entrypoint runs until the task either\nyields or performs a IO operation using one of the coro.io namespace functions.\nvar task = try scheduler.spawn(entrypoint, .{ 1, &quot;args&quot; }, .{});\nIn case the return type of the function can not be deduced by the compiler, use the spawnAny variant.\nvar task = try scheduler.spawnAny(void, entrypoint, .{ 1, &quot;args&quot; }, .{});\n","title":"Spawning tasks","titles":["CORO API","Scheduler"]},"56":{"href":"/coro-scheduler#collecting-result-from-a-task","html":"\n<p>Use the following to collect a result of a task.\nAfter collecting the result, the task handle is no longer valid.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">complete</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>To cancel and collect partial result.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">complete</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">cancel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>To only cancel and ignore the result.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">cancel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n","isPage":false,"text":"\nUse the following to collect a result of a task.\nAfter collecting the result, the task handle is no longer valid.\nconst res = task.complete(.wait);\nTo cancel and collect partial result.\nconst res = task.complete(.cancel);\nTo only cancel and ignore the result.\ntask.cancel();\n","title":"Collecting result from a task","titles":["CORO API","Scheduler"]},"57":{"href":"/coro-scheduler#running","html":"\n<p>The scheduler can process tasks and IO one step a time with the tick method.\nBy running tick the scheduler will reap tasks that returned (dead tasks) and context switch back to the\ntasks in case they completed their IO operations.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// If there are pending IO operations, blocks until at least one completes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">tick</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">blocking</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns immediately regardless of the current IO state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">tick</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">nonblocking</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>To run the scheduler until all tasks have completed use the following.\nThe <code>mode</code> option can let you decide whether to wait for all tasks to finish, or to actively try cancel them.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Wait the tasks forever</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Actively cancel the tasks</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">cancel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>","isPage":false,"text":"\nThe scheduler can process tasks and IO one step a time with the tick method.\nBy running tick the scheduler will reap tasks that returned (dead tasks) and context switch back to the\ntasks in case they completed their IO operations.\n// If there are pending IO operations, blocks until at least one completes\ntry scheduler.tick(.blocking);\n// Returns immediately regardless of the current IO state\ntry scheduler.tick(.nonblocking);\nTo run the scheduler until all tasks have completed use the following.\nThe mode option can let you decide whether to wait for all tasks to finish, or to actively try cancel them.\n// Wait the tasks forever\ntry scheduler.run(.wait);\n// Actively cancel the tasks\ntry scheduler.run(.cancel);","title":"Running","titles":["CORO API","Scheduler"]},"58":{"href":"#overview","html":"</header>\n<p>zig-aio provides io_uring like asynchronous API and coroutine powered IO tasks for zig</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> @import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;std&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> aio</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> @import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;aio&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">scoped</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">aio_immediate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pub</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">cwd</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">openFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;flake.nix&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4096</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u8</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">usize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">cwd</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">openFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;build.zig.zon&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> buf2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4096</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">u8</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> len2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">usize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> num_errors</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> try</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">complete</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.{</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">        aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">op</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">read</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">file</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_read</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">unlinked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">        aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">op</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">read</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">file</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> f2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buffer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">out_read</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }, .</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">unlinked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">info</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;{s}&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">..</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]});</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">info</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;{s}&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">buf2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">..</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">len2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]});</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">info</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;{}&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">num_errors</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":true,"text":"\nzig-aio provides io_uring like asynchronous API and coroutine powered IO tasks for zig\nconst std = @import(&quot;std&quot;);\nconst aio = @import(&quot;aio&quot;);\nconst log = std.log.scoped(.aio_immediate);\n \npub fn main() !void {\n    var f = try std.fs.cwd().openFile(&quot;flake.nix&quot;, .{});\n    defer f.close();\n    var buf: [4096]u8 = undefined;\n    var len: usize = 0;\n \n    var f2 = try std.fs.cwd().openFile(&quot;build.zig.zon&quot;, .{});\n    defer f2.close();\n    var buf2: [4096]u8 = undefined;\n    var len2: usize = 0;\n \n    const num_errors = try aio.complete(.{\n        aio.op(.read, .{\n            .file = f,\n            .buffer = &amp;buf,\n            .out_read = &amp;len,\n        }, .unlinked),\n        aio.op(.read, .{\n            .file = f2,\n            .buffer = &amp;buf2,\n            .out_read = &amp;len2,\n        }, .unlinked),\n    });\n \n    log.info(&quot;{s}&quot;, .{buf[0..len]});\n    log.info(&quot;{s}&quot;, .{buf2[0..len2]});\n    log.info(&quot;{}&quot;, .{num_errors});\n}\n","title":"Overview","titles":[]},"59":{"href":"#features","html":"\n<ul>\n<li>Blocking and asynchronous API</li>\n<li>Atomic operations</li>\n<li>Parallel execution</li>\n<li>Cancellation</li>\n<li>Timeouts</li>\n<li>Comes with a runtime and scheduler for coroutines</li>\n<li>Portable high precision timers compatible with <code>io_uring</code> <code>timeout</code></li>\n<li>Tightly tied into <code>io_uring</code> by providing compatible API</li>\n</ul>\n","isPage":false,"text":"\n\nBlocking and asynchronous API\nAtomic operations\nParallel execution\nCancellation\nTimeouts\nComes with a runtime and scheduler for coroutines\nPortable high precision timers compatible with io_uring timeout\nTightly tied into io_uring by providing compatible API\n\n","title":"Features","titles":["Overview"]},"60":{"href":"#support-matrix","html":"\n<table><thead><tr><th>OS</th><th>AIO</th><th>CORO</th></tr></thead><tbody><tr><td>Linux</td><td>io_uring, posix</td><td>x86_64, aarch64</td></tr><tr><td>Windows</td><td>iocp</td><td>x86_64, aarch64</td></tr><tr><td>Darwin</td><td>posix</td><td>x86_64, aarch64</td></tr><tr><td>*BSD</td><td>posix</td><td>x86_64, aarch64</td></tr><tr><td>WASI</td><td>posix</td><td>❌</td></tr></tbody></table>\n<ul>\n<li>io_uring AIO backend is very light wrapper, where all the code does is mostly error mapping</li>\n<li>iocp also maps quite well to the io_uring style API</li>\n<li>posix backend is for compatibility, it may not be very effecient</li>\n<li>WASI may eventually get coro support <a href=\"https://github.com/WebAssembly/stack-switching/blob/main/proposals/stack-switching/Explainer.md\">Stack Switching Proposal</a>)</li>\n</ul>","isPage":false,"text":"\nOSAIOCOROLinuxio_uring, posixx86_64, aarch64Windowsiocpx86_64, aarch64Darwinposixx86_64, aarch64*BSDposixx86_64, aarch64WASIposix❌\n\nio_uring AIO backend is very light wrapper, where all the code does is mostly error mapping\niocp also maps quite well to the io_uring style API\nposix backend is for compatibility, it may not be very effecient\nWASI may eventually get coro support Stack Switching Proposal)\n","title":"Support matrix","titles":["Overview"]},"61":{"href":"/integration#integrating-zig-aio","html":"</header>\n","isPage":true,"text":"\n","title":"Integrating zig-aio","titles":[]},"62":{"href":"/integration#zig-package-manager","html":"\n","isPage":false,"text":"\n","title":"Zig Package Manager","titles":["Integrating zig-aio"]},"63":{"href":"/integration#fetching-and-updating-the-zig-aio-dependency","html":"\n<p>Run the following command in zig project root directory.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">zig</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fetch</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --save</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> git+https://github.com/Cloudef/zig-aio.git</span></span></code></pre>\n","isPage":false,"text":"\nRun the following command in zig project root directory.\nzig fetch --save git+https://github.com/Cloudef/zig-aio.git\n","title":"Fetching and updating the zig-aio dependency","titles":["Integrating zig-aio","Zig Package Manager"]},"64":{"href":"/integration#using-zig-aio-modules-in-zig-project","html":"\n<p>In <code>build.zig</code> file add the following for whichever modules <code>zig-aio</code> is required.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// get the &quot;zig-aio&quot; dependency from &quot;build.zig.zon&quot;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> zig_aio</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">dependency</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;zig-aio&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, .{});</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// for exe, lib, tests, etc.</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">exe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">root_module</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addImport</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;aio&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">zig_aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">module</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;aio&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// for coroutines api</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">exe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">root_module</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addImport</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;coro&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">zig_aio</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">module</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;coro&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span></code></pre>\n","isPage":false,"text":"\nIn build.zig file add the following for whichever modules zig-aio is required.\n// get the &quot;zig-aio&quot; dependency from &quot;build.zig.zon&quot;\nconst zig_aio = b.dependency(&quot;zig-aio&quot;, .{});\n// for exe, lib, tests, etc.\nexe.root_module.addImport(&quot;aio&quot;, zig_aio.module(&quot;aio&quot;));\n// for coroutines api\nexe.root_module.addImport(&quot;coro&quot;, zig_aio.module(&quot;coro&quot;));\n","title":"Using zig-aio modules in zig project","titles":["Integrating zig-aio","Zig Package Manager"]},"65":{"href":"/integration#using-zig-aio-in-zig-code","html":"\n<p>It&#x27;s possible to import the modules like this.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> aio</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> @import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;aio&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> coro</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> @import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;coro&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>","isPage":false,"text":"\nIt&#x27;s possible to import the modules like this.\nconst aio = @import(&quot;aio&quot;);\nconst coro = @import(&quot;coro&quot;);","title":"Using zig-aio in zig code","titles":["Integrating zig-aio","Zig Package Manager"]}},"dirtCount":0,"index":[["64",{"2":{"60":4}}],["69",{"2":{"45":2}}],["zon",{"2":{"58":1,"64":1}}],["zig",{"0":{"61":1,"62":1,"63":1,"64":2,"65":2},"1":{"62":1,"63":2,"64":2,"65":2},"2":{"7":1,"9":1,"58":3,"63":3,"64":8}}],["you",{"2":{"57":1}}],["yields",{"2":{"49":1,"55":1}}],["yielded",{"2":{"47":2}}],["yielding",{"2":{"47":1,"49":1}}],["yieldforcompletion",{"2":{"45":1}}],["yield",{"2":{"44":1,"47":8}}],["4096",{"2":{"50":1,"58":2}}],["|",{"2":{"50":4}}],["kernel",{"2":{"49":1}}],["kind",{"2":{"44":1}}],["known",{"2":{"1":1}}],["2",{"2":{"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"38":1}}],["git",{"2":{"63":1}}],["github",{"2":{"63":1}}],["git+https",{"2":{"63":1}}],["given",{"2":{"17":1}}],["guide",{"2":{"53":1}}],["get",{"2":{"60":1,"64":1}}],["getossocklen",{"2":{"50":2}}],["generalpurposeallocator",{"2":{"50":1}}],["gpa",{"2":{"50":3,"54":1}}],["got",{"2":{"50":3}}],["gt",{"2":{"11":1,"47":1}}],["0",{"2":{"11":1,"14":1,"18":1,"19":1,"27":1,"33":2,"34":1,"35":1,"36":2,"47":2,"50":13,"58":4}}],["root",{"2":{"63":1,"64":2}}],["runtime",{"2":{"59":1}}],["runs",{"2":{"55":1}}],["run",{"2":{"45":1,"49":1,"50":1,"57":3,"63":1}}],["running",{"0":{"57":1},"2":{"11":1,"47":1,"51":1,"57":1}}],["required",{"2":{"64":1}}],["requires",{"2":{"2":1,"54":1}}],["regardless",{"2":{"57":1}}],["reap",{"2":{"57":1}}],["ready",{"2":{"40":1,"41":2}}],["reads",{"2":{"17":1,"18":1}}],["readtty",{"0":{"17":1}}],["read",{"0":{"18":1},"2":{"3":1,"10":2,"11":7,"17":3,"18":3,"22":1,"50":3,"58":4}}],["reply",{"2":{"50":2}}],["representing",{"2":{"47":1}}],["reuseport",{"2":{"50":2}}],["reuseaddr",{"2":{"50":1}}],["ret",{"2":{"45":2}}],["returned",{"2":{"57":1}}],["return",{"2":{"11":1,"45":1,"47":1,"55":1}}],["returns",{"2":{"4":4,"8":2,"10":2,"11":1,"57":1}}],["rewrite",{"2":{"44":1}}],["rename",{"2":{"33":1}}],["renameat",{"0":{"33":1}}],["relative",{"2":{"27":1,"33":2,"34":1,"35":1,"36":1}}],["recvmsg",{"0":{"24":1},"2":{"24":1}}],["recv",{"0":{"22":1},"2":{"22":1,"50":3}}],["referenced",{"2":{"32":1}}],["refer",{"2":{"14":1,"53":1}}],["remain",{"2":{"13":1}}],["result",{"0":{"56":1},"2":{"51":1,"56":4}}],["resetevent",{"2":{"50":3}}],["reset",{"2":{"47":1}}],["resevered",{"2":{"47":1}}],["resources",{"2":{"11":1}}],["res",{"2":{"4":2,"11":2,"56":2}}],["quite",{"2":{"60":1}}],["quot",{"2":{"8":2,"10":2,"11":6,"50":26,"55":4,"58":14,"64":14,"65":4}}],["queues",{"2":{"49":1}}],["queued",{"2":{"3":1,"5":1}}],["queue",{"2":{"3":4,"5":1,"14":1}}],["queuing",{"0":{"3":1}}],["very",{"2":{"60":2}}],["valid",{"2":{"56":1}}],["value",{"2":{"47":4}}],["variant",{"2":{"55":1}}],["var",{"2":{"2":1,"10":2,"11":4,"45":2,"50":14,"54":1,"55":2,"58":6}}],["vt",{"2":{"17":1}}],["void",{"2":{"5":3,"8":1,"10":1,"45":1,"50":3,"55":1,"58":1}}],["high",{"2":{"59":1}}],["hey",{"2":{"50":1}}],["heap",{"2":{"2":2,"50":2}}],["how",{"2":{"26":1,"50":2}}],["hasdecl",{"2":{"50":1}}],["has",{"2":{"13":2,"47":1}}],["handle",{"2":{"56":1}}],["handler",{"0":{"5":1},"2":{"5":3}}],["handful",{"2":{"13":1}}],["have",{"2":{"11":1,"31":1,"40":1,"41":1,"57":1}}],["hard",{"2":{"10":1,"13":1,"31":1}}],["127",{"2":{"50":1}}],["128",{"2":{"50":1}}],["1327",{"2":{"50":2}}],["1024",{"2":{"10":1,"11":1,"50":4}}],["1",{"2":{"4":1,"45":1,"50":3,"55":2}}],["nix",{"2":{"58":1}}],["nice",{"2":{"44":1}}],["namespace",{"2":{"49":1,"50":1,"55":1}}],["need",{"2":{"53":1}}],["net",{"2":{"50":2}}],["new",{"2":{"33":4,"55":1}}],["next",{"2":{"10":4,"13":4,"49":1}}],["ns",{"2":{"30":1,"31":1,"45":1}}],["null",{"2":{"14":2,"19":1,"20":2,"23":1,"37":1}}],["num",{"2":{"4":1,"11":1,"58":2}}],["number",{"2":{"4":3,"11":1}}],["nop",{"0":{"15":1}}],["normally",{"2":{"10":1,"13":1}}],["notification",{"2":{"40":1,"41":1}}],["notifications",{"2":{"15":1}}],["notifies",{"2":{"40":1}}],["notifyeventsource",{"0":{"40":1}}],["not",{"2":{"10":1,"11":1,"13":1,"14":1,"44":1,"47":1,"49":1,"55":1,"60":1}}],["no",{"2":{"4":1,"8":1,"10":1,"14":1,"56":1}}],["nonblocking",{"2":{"4":1,"57":1}}],["none",{"2":{"3":1}}],["non",{"2":{"2":1,"4":2,"47":1,"53":1}}],["effecient",{"2":{"60":1}}],["entrypoint",{"2":{"55":6}}],["enum",{"2":{"47":2}}],["equal",{"2":{"50":2}}],["exe",{"2":{"64":3}}],["execution",{"2":{"59":1}}],["execute",{"2":{"49":1}}],["expected",{"2":{"47":1}}],["expectequal",{"2":{"45":1}}],["expires",{"2":{"30":1}}],["exit",{"2":{"37":2}}],["existing",{"2":{"32":1}}],["example",{"0":{"45":1},"2":{"5":1,"47":1,"50":1}}],["etc",{"2":{"15":1,"64":1}}],["every",{"2":{"14":1,"40":1,"41":1}}],["eventually",{"2":{"60":1}}],["eventsource",{"2":{"40":1,"41":1,"42":1}}],["event",{"2":{"40":3,"41":3,"42":1}}],["even",{"2":{"4":1}}],["error",{"2":{"8":2,"10":1,"11":14,"14":5,"15":1,"47":3,"51":2,"60":1}}],["errors",{"2":{"4":3,"10":1,"11":3,"58":2}}],["either",{"2":{"3":1,"4":1,"31":1,"40":1,"41":1,"55":1}}],["longer",{"2":{"56":1}}],["log",{"2":{"50":6,"58":5}}],["locating",{"2":{"34":1}}],["location",{"2":{"17":1,"18":1,"19":1,"27":1}}],["let",{"2":{"57":1}}],["level",{"2":{"50":1}}],["len2",{"2":{"58":3}}],["len",{"2":{"10":2,"11":2,"50":10,"58":3}}],["least",{"2":{"4":2,"57":1}}],["lib",{"2":{"64":1}}],["light",{"2":{"60":1}}],["listen",{"2":{"50":1}}],["list",{"2":{"10":1}}],["linktimeout",{"0":{"31":1}}],["linked",{"2":{"13":1,"31":1}}],["linking",{"2":{"10":1,"36":1}}],["link",{"2":{"5":1,"10":5,"13":5,"14":1,"31":1,"36":2}}],["like",{"2":{"3":1,"58":1,"65":1}}],["just",{"2":{"3":1}}],["pending",{"2":{"57":1}}],["per",{"2":{"45":1}}],["performs",{"2":{"55":1}}],["performing",{"0":{"50":1},"2":{"50":1}}],["perform",{"0":{"8":1,"9":1},"1":{"10":1,"11":1},"2":{"49":1}}],["precision",{"2":{"59":1}}],["pre",{"2":{"55":1}}],["project",{"0":{"64":1},"2":{"63":1}}],["proposal",{"2":{"60":1}}],["propagate",{"2":{"10":2,"13":2}}],["provide",{"2":{"55":1}}],["provides",{"2":{"7":1,"9":1,"58":1}}],["providing",{"2":{"55":1,"59":1}}],["program",{"2":{"49":1,"50":1}}],["programming",{"2":{"47":1}}],["protocol",{"2":{"38":1,"50":2}}],["process",{"2":{"37":3,"57":1}}],["plays",{"2":{"44":1}}],["pub",{"2":{"15":1,"50":2,"58":1}}],["portable",{"2":{"59":1}}],["powered",{"2":{"58":1}}],["pool",{"2":{"45":7}}],["posixx86",{"2":{"60":1}}],["posix",{"2":{"20":4,"21":3,"22":1,"23":1,"24":2,"25":2,"26":2,"38":4,"39":1,"50":20,"60":1}}],["possible",{"2":{"3":1,"4":1,"5":1,"44":1,"49":1,"51":1,"65":1}}],["pointed",{"2":{"17":2,"18":1,"19":1,"27":1}}],["pointer",{"2":{"13":1}}],["package",{"0":{"62":1},"1":{"63":1,"64":1,"65":1}}],["parallel",{"2":{"59":1}}],["parameter",{"2":{"35":1,"55":2}}],["partial",{"2":{"51":1,"56":1}}],["paired",{"0":{"47":1}}],["path",{"2":{"27":2,"33":4,"34":2,"35":2,"36":2}}],["panic",{"2":{"11":2}}],["pass",{"2":{"5":1}}],["page",{"2":{"2":2}}],["save",{"2":{"63":1}}],["said",{"2":{"53":1}}],["same",{"2":{"2":1,"42":1,"45":1,"50":1}}],["switching",{"2":{"60":1}}],["switch",{"2":{"47":1,"57":1}}],["switches",{"0":{"47":1},"2":{"53":1}}],["spawnany",{"2":{"55":2}}],["spawnoptions",{"2":{"55":1}}],["spawned",{"2":{"55":2}}],["spawning",{"0":{"55":1}}],["spawnforcompletion",{"2":{"45":1}}],["spawn",{"2":{"45":1,"50":2,"55":1}}],["specifying",{"2":{"55":1}}],["specify",{"2":{"35":1,"55":1}}],["specific",{"2":{"14":1}}],["sleep",{"2":{"45":1}}],["schedules",{"2":{"53":1}}],["scheduler",{"0":{"53":1,"54":1},"1":{"54":1,"55":1,"56":1,"57":1},"2":{"5":1,"44":1,"45":7,"49":3,"50":6,"53":1,"54":5,"55":2,"57":7,"59":1}}],["scoped",{"2":{"50":1,"58":1}}],["scenario",{"2":{"44":1}}],["shorthand",{"2":{"47":1}}],["shutdownhow",{"2":{"26":1}}],["shutdown",{"0":{"26":1},"2":{"26":1}}],["sharederror",{"2":{"15":1}}],["syscall",{"2":{"49":1}}],["systems",{"2":{"35":1}}],["system",{"2":{"11":1}}],["symlink",{"2":{"36":1}}],["symlinkat",{"0":{"36":1}}],["synchronizes",{"2":{"16":1}}],["supply",{"2":{"55":1}}],["support",{"0":{"60":1},"2":{"60":1}}],["supporting",{"2":{"35":1}}],["supports",{"2":{"14":1}}],["supported",{"2":{"13":1}}],["sucessful",{"2":{"14":1}}],["success",{"2":{"11":2,"14":1}}],["such",{"2":{"11":1,"51":1}}],["second",{"2":{"55":1}}],["server",{"2":{"50":5}}],["semantics",{"2":{"40":1,"41":1}}],["semaphore",{"2":{"40":1,"41":1}}],["sendmsg",{"0":{"25":1},"2":{"25":1}}],["send",{"0":{"23":1},"2":{"23":1,"50":5}}],["see",{"2":{"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"38":1}}],["sequences",{"2":{"17":1}}],["setsockopt",{"2":{"50":2}}],["setups",{"2":{"49":1}}],["set",{"2":{"14":2,"31":1,"50":1,"51":1}}],["setting",{"2":{"11":1}}],["self",{"2":{"5":2}}],["size",{"2":{"55":1}}],["simple",{"2":{"50":1}}],["similar",{"2":{"11":1,"50":1}}],["signal",{"2":{"41":1}}],["signaled",{"2":{"40":1,"41":1}}],["single",{"0":{"8":1},"2":{"3":2,"8":2,"49":1,"50":7}}],["step",{"2":{"57":1}}],["stores",{"2":{"54":1}}],["stored",{"2":{"11":1,"14":3,"17":1,"18":1,"19":1,"27":1}}],["style",{"2":{"53":1,"60":1}}],["stream",{"2":{"50":2}}],["stack",{"2":{"55":2,"60":1}}],["state",{"2":{"47":9,"49":1,"57":1}}],["status",{"2":{"37":1}}],["stable",{"2":{"13":1}}],["startup",{"2":{"50":7}}],["starts",{"2":{"10":1,"13":1,"30":1}}],["start",{"2":{"10":1,"13":1}}],["still",{"2":{"11":1,"53":1}}],["std",{"2":{"2":2,"16":1,"17":1,"18":1,"19":1,"20":4,"21":3,"22":1,"23":1,"24":1,"25":1,"26":2,"27":3,"28":1,"29":1,"33":2,"34":1,"35":2,"36":1,"37":2,"38":4,"39":1,"45":5,"50":32,"58":5}}],["s",{"2":{"8":1,"44":1,"45":1,"47":1,"50":3,"51":1,"58":2,"65":1}}],["sol",{"2":{"50":2}}],["sources",{"2":{"40":1,"41":1}}],["source",{"2":{"30":1,"40":4,"41":4,"42":3}}],["sock",{"2":{"38":1,"50":12}}],["socklen",{"2":{"20":1,"21":1}}],["sockaddr",{"2":{"20":1,"21":1}}],["socket",{"0":{"38":1},"2":{"20":4,"21":2,"22":2,"23":2,"24":2,"25":2,"26":2,"38":3,"39":3,"50":38}}],["so",{"2":{"5":1,"44":1,"50":3}}],["someenum",{"2":{"47":3}}],["sometimes",{"2":{"44":1}}],["somewhere",{"2":{"11":1}}],["someoperationfailed",{"2":{"10":1,"11":1}}],["some",{"2":{"5":1,"49":1}}],["soft",{"2":{"3":2,"10":2,"11":1,"13":1,"31":1,"50":5}}],["wrapper",{"2":{"60":1}}],["written",{"2":{"19":3,"23":1}}],["writes",{"2":{"19":1}}],["write",{"0":{"19":1},"2":{"3":1,"8":1,"10":1,"11":6}}],["well",{"2":{"60":1}}],["we",{"2":{"53":2}}],["were",{"2":{"4":2,"10":1}}],["where",{"2":{"60":1}}],["whether",{"2":{"57":1}}],["when",{"2":{"10":1,"13":1,"47":3,"49":1,"55":1}}],["whenever",{"2":{"5":2}}],["while",{"2":{"49":1,"50":1,"53":1}}],["whichever",{"2":{"64":1}}],["which",{"2":{"11":1,"40":1,"41":1,"45":1,"55":1}}],["words",{"2":{"50":1}}],["worker",{"2":{"44":1}}],["work",{"2":{"2":2,"3":2,"4":3}}],["would",{"2":{"50":1}}],["woken",{"2":{"47":1}}],["won",{"2":{"10":1,"13":1}}],["warn",{"2":{"50":3}}],["waking",{"2":{"47":2}}],["wakeupif",{"2":{"47":1}}],["wakeup",{"2":{"15":1,"47":5}}],["way",{"2":{"14":1}}],["ways",{"2":{"11":1}}],["waiteventsource",{"0":{"41":1},"2":{"40":1,"41":1}}],["waits",{"2":{"37":1,"41":1}}],["wait",{"2":{"4":1,"40":1,"41":1,"45":1,"50":2,"56":1,"57":3}}],["wasi",{"2":{"60":1}}],["was",{"2":{"2":1,"8":1,"14":1,"47":1}}],["windows",{"2":{"17":1}}],["will",{"2":{"3":1,"4":1,"10":2,"11":1,"13":2,"14":3,"17":1,"31":2,"51":1,"57":1}}],["within",{"2":{"4":1}}],["with",{"2":{"3":1,"40":1,"41":1,"44":1,"47":1,"49":2,"57":1,"59":2}}],["32",{"2":{"2":1}}],["=",{"2":{"2":2,"4":3,"8":2,"10":7,"11":14,"14":3,"15":1,"17":1,"18":1,"19":2,"20":2,"23":1,"27":1,"35":1,"37":1,"45":5,"47":1,"50":59,"54":1,"55":2,"56":2,"58":16,"64":1,"65":2}}],["m",{"2":{"50":1}}],["mixing",{"0":{"44":1},"1":{"45":1}}],["mkdirat",{"0":{"35":1}}],["mostly",{"2":{"60":1}}],["monotonic",{"2":{"30":1}}],["modified",{"2":{"14":1}}],["modules",{"0":{"64":1},"2":{"64":1,"65":1}}],["module",{"2":{"7":1,"50":2,"64":4}}],["mode",{"2":{"4":1,"17":3,"35":4,"57":1}}],["msghdr",{"2":{"24":1,"25":1}}],["msg",{"2":{"24":1,"25":1}}],["maps",{"2":{"60":1}}],["mapping",{"2":{"60":1}}],["matrix",{"0":{"60":1}}],["maintaining",{"2":{"53":1}}],["main",{"2":{"50":1,"58":1}}],["manager",{"0":{"62":1},"1":{"63":1,"64":1,"65":1}}],["managed",{"2":{"54":1}}],["man",{"2":{"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"38":1}}],["may",{"2":{"11":1,"47":1,"49":1,"60":2}}],["max",{"2":{"2":2}}],["my",{"2":{"10":4,"11":4}}],["mem",{"2":{"50":5}}],["memory",{"2":{"2":1}}],["merged",{"2":{"49":1}}],["method",{"2":{"47":2,"57":1}}],["methods",{"2":{"9":1}}],["meaning",{"2":{"40":1,"41":1}}],["multi",{"0":{"10":1},"2":{"10":1,"11":1,"50":2}}],["multiple",{"0":{"9":1},"1":{"10":1,"11":1},"2":{"3":2,"50":1}}],["must",{"2":{"2":1,"13":1,"31":1,"45":1}}],["fetch",{"2":{"63":1}}],["fetching",{"0":{"63":1}}],["features",{"0":{"59":1}}],["feasible",{"2":{"44":1}}],["f2",{"2":{"58":3}}],["flake",{"2":{"58":1}}],["flags",{"2":{"27":2,"38":1,"50":2}}],["fba",{"2":{"50":1}}],["fn",{"2":{"45":2,"50":3,"58":1}}],["from",{"0":{"56":1},"2":{"18":1,"19":1,"49":1,"50":4,"64":1}}],["frees",{"2":{"2":1}}],["fs",{"2":{"16":1,"17":1,"18":1,"19":1,"27":3,"28":1,"29":1,"33":2,"34":1,"35":2,"36":1,"58":2}}],["fsync",{"0":{"16":1},"2":{"3":1}}],["full",{"2":{"50":1}}],["fully",{"2":{"40":1,"41":1}}],["future",{"2":{"14":1}}],["function",{"2":{"47":1,"50":1,"55":1}}],["functions",{"2":{"5":1,"7":1,"49":1,"50":1,"55":1}}],["funcitons",{"2":{"5":1}}],["fixedbufferallocator",{"2":{"50":1}}],["finish",{"2":{"57":1}}],["finishes",{"2":{"31":2,"44":1}}],["final",{"2":{"50":1}}],["find",{"2":{"11":1}}],["first",{"2":{"13":1}}],["fields",{"0":{"14":1},"2":{"14":1}}],["field",{"2":{"10":1,"11":1}}],["file",{"2":{"8":1,"10":2,"11":2,"16":3,"17":2,"18":3,"19":3,"27":5,"28":3,"34":1,"58":2,"64":1}}],["f",{"2":{"8":1,"10":2,"11":2,"58":3}}],["following",{"2":{"5":1,"7":1,"47":1,"56":1,"57":1,"63":1,"64":1}}],["forever",{"2":{"57":1}}],["for",{"2":{"2":1,"4":1,"5":1,"7":1,"9":1,"37":1,"41":1,"47":1,"49":2,"54":1,"57":1,"58":1,"59":1,"60":1,"64":3}}],["fail",{"2":{"11":2}}],["failure",{"2":{"10":2,"13":2,"14":1}}],["failed",{"2":{"5":1,"8":1,"10":1,"11":3,"14":1}}],["fails",{"2":{"3":1}}],["fashion",{"2":{"4":1}}],["dude",{"2":{"50":1}}],["during",{"2":{"2":2,"49":1}}],["drained",{"2":{"40":1,"41":1}}],["do",{"2":{"53":1}}],["don",{"2":{"50":1}}],["done",{"2":{"5":1}}],["doing",{"2":{"50":1}}],["does",{"2":{"45":1,"60":1}}],["domain",{"2":{"38":1,"50":2}}],["dir",{"2":{"27":3,"29":3,"33":6,"34":3,"35":4,"36":3}}],["directly",{"2":{"40":1,"41":1}}],["directory",{"2":{"34":1,"35":2,"63":1}}],["direct",{"2":{"17":1}}],["disk",{"2":{"16":1}}],["dependency",{"0":{"63":1},"2":{"64":2}}],["decide",{"2":{"57":1}}],["dead",{"2":{"57":1}}],["deduced",{"2":{"55":1}}],["destruction",{"2":{"54":1}}],["destroyed",{"2":{"45":1}}],["debug",{"2":{"50":1}}],["delete",{"2":{"34":1}}],["device",{"2":{"17":1}}],["default",{"2":{"35":1}}],["defined",{"2":{"11":1}}],["defer",{"2":{"2":1,"45":2,"50":2,"54":1,"58":2}}],["deinit",{"2":{"2":3,"42":1,"45":2,"50":2,"54":1}}],["dynamic",{"0":{"1":1,"2":1},"1":{"2":1,"3":1,"4":1,"5":1},"2":{"1":1,"2":2,"4":1,"5":2,"49":1}}],["b",{"2":{"64":1}}],["bsdposixx86",{"2":{"60":1}}],["break",{"2":{"50":1}}],["bind",{"2":{"50":1}}],["back",{"2":{"57":1}}],["backends",{"2":{"49":1}}],["backend",{"2":{"15":1,"49":1,"60":2}}],["batching",{"2":{"9":1}}],["build",{"2":{"58":1,"64":2}}],["buf2",{"2":{"58":3}}],["buf",{"2":{"50":10,"58":3}}],["buffer",{"2":{"8":1,"10":4,"11":4,"17":2,"18":2,"19":2,"22":1,"23":1,"50":8,"58":2}}],["but",{"2":{"11":1,"50":1}}],["bye",{"2":{"50":1}}],["bytes",{"2":{"17":1,"18":1,"19":1}}],["by",{"2":{"5":1,"11":1,"17":2,"18":1,"19":1,"27":2,"32":1,"40":2,"41":2,"47":2,"55":3,"57":1,"59":1}}],["bool",{"2":{"5":1}}],["bound",{"2":{"2":1}}],["blocks",{"2":{"4":2,"8":1,"10":1,"57":1}}],["blockingcode",{"2":{"45":3}}],["blocking",{"0":{"44":1},"1":{"45":1},"2":{"4":5,"7":1,"44":2,"53":2,"57":1,"59":1}}],["below",{"2":{"50":1}}],["beneficial",{"2":{"49":1}}],["before",{"2":{"31":3,"45":1}}],["been",{"2":{"13":1,"47":1}}],["be",{"2":{"1":1,"2":1,"3":1,"10":1,"11":1,"13":1,"14":5,"15":1,"17":1,"31":2,"45":1,"47":1,"49":1,"50":1,"51":1,"55":3,"60":1}}],["uring",{"2":{"49":1,"58":1,"59":2,"60":3}}],["updating",{"0":{"63":1}}],["up",{"2":{"47":3}}],["upper",{"2":{"2":1}}],["u32",{"2":{"35":1,"38":3,"45":1}}],["u64",{"2":{"18":1,"19":1}}],["u8",{"2":{"10":1,"11":1,"17":1,"18":1,"19":1,"22":1,"23":1,"27":1,"33":2,"34":1,"35":1,"36":2,"50":5,"58":2}}],["using",{"0":{"10":1,"11":1,"64":1,"65":1},"2":{"40":1,"41":1,"50":1,"55":1}}],["usize",{"2":{"5":2,"10":1,"11":1,"14":1,"15":1,"17":1,"18":1,"19":1,"22":1,"23":1,"50":3,"58":2}}],["user",{"2":{"47":1}}],["userdata",{"2":{"5":2,"14":2}}],["uses",{"2":{"30":1,"54":1}}],["use",{"2":{"4":1,"44":1,"47":2,"49":1,"50":1,"51":1,"55":1,"56":1,"57":1}}],["used",{"2":{"1":1,"2":2,"5":1,"10":1,"13":1,"14":2,"15":1,"50":1,"55":1}}],["unmanaged",{"2":{"55":1}}],["unlinkat",{"0":{"34":1}}],["unlinked",{"2":{"3":2,"10":1,"11":1,"50":2,"58":2}}],["unimplemented",{"2":{"17":1}}],["undefined",{"2":{"10":2,"11":4,"50":7,"58":2}}],["until",{"2":{"4":2,"8":1,"10":2,"13":2,"40":1,"41":1,"44":1,"55":1,"57":2}}],["cwd",{"2":{"58":2}}],["c",{"2":{"50":2}}],["client",{"2":{"50":12}}],["cloudef",{"2":{"63":1}}],["cloexec",{"2":{"50":2}}],["clock",{"2":{"30":1}}],["close",{"2":{"50":2,"58":2}}],["closeeventsource",{"0":{"42":1}}],["closedir",{"0":{"29":1}}],["closesocket",{"0":{"39":1}}],["closes",{"2":{"28":1,"29":1,"39":1,"42":1}}],["closefile",{"0":{"28":1}}],["checking",{"2":{"47":1}}],["checked",{"2":{"47":1}}],["child",{"2":{"37":4}}],["childexit",{"0":{"37":1}}],["chain",{"2":{"10":1,"13":1}}],["creation",{"2":{"54":1}}],["creating",{"2":{"2":1}}],["create",{"2":{"35":1,"36":1}}],["current",{"2":{"47":2,"57":1}}],["currently",{"2":{"17":1,"51":1}}],["customized",{"2":{"27":1}}],["custom",{"2":{"15":1}}],["coding",{"2":{"53":1}}],["code",{"0":{"44":1,"65":1},"1":{"45":1},"2":{"5":1,"44":2,"47":1,"49":1,"55":1,"60":1}}],["collecting",{"0":{"56":1},"2":{"56":1}}],["collect",{"2":{"51":1,"56":2}}],["collects",{"2":{"37":1}}],["cool",{"2":{"50":2}}],["cooperative",{"2":{"49":1}}],["corresponds",{"2":{"47":1}}],["coroutine",{"2":{"58":1}}],["coroutines",{"2":{"53":3,"59":1,"64":1}}],["coro",{"0":{"43":1,"46":1,"48":1,"52":1},"1":{"44":1,"45":1,"47":1,"49":1,"50":1,"51":1,"53":1,"54":1,"55":1,"56":1,"57":1},"2":{"5":1,"44":2,"47":1,"49":2,"50":19,"54":1,"55":1,"60":1,"64":2,"65":2}}],["counter",{"2":{"40":2,"41":2}}],["com",{"2":{"63":1}}],["command",{"2":{"63":1}}],["common",{"0":{"14":1},"2":{"14":1}}],["comes",{"2":{"59":1}}],["compatibility",{"2":{"60":1}}],["compatible",{"2":{"59":2}}],["compiler",{"2":{"55":1}}],["completion",{"2":{"49":1}}],["completionresult",{"2":{"4":1}}],["completing",{"0":{"4":1}}],["completeall",{"2":{"4":2}}],["completes",{"2":{"4":1,"5":1,"8":1,"10":1,"30":1,"57":1}}],["complete",{"0":{"11":1},"2":{"4":7,"5":1,"8":1,"10":2,"11":4,"51":1,"56":2,"58":1}}],["completed",{"2":{"2":1,"4":2,"13":2,"57":2}}],["connect",{"0":{"21":1},"2":{"21":1,"50":1}}],["context",{"0":{"47":1},"2":{"14":1,"53":1,"57":1}}],["contents",{"2":{"8":1,"10":1,"11":1,"16":1,"19":1}}],["containing",{"2":{"4":1}}],["const",{"2":{"2":1,"4":3,"11":1,"15":1,"19":1,"23":1,"25":2,"27":1,"33":2,"34":1,"35":1,"36":2,"45":1,"50":7,"56":2,"58":4,"64":1,"65":2}}],["care",{"2":{"50":1}}],["caller",{"2":{"47":1}}],["called",{"2":{"5":2,"55":1}}],["calling",{"2":{"42":1,"47":1,"49":1,"50":1}}],["callback",{"2":{"5":1}}],["call",{"2":{"3":2,"4":1,"8":1,"11":1,"50":1,"51":1}}],["cancellation",{"2":{"59":1}}],["cancellations",{"0":{"51":1}}],["cancel",{"0":{"32":1},"2":{"32":1,"51":5,"56":4,"57":3}}],["canceled",{"2":{"31":2,"47":2,"51":1}}],["can",{"2":{"1":1,"5":1,"10":1,"13":1,"14":2,"15":1,"35":1,"47":1,"55":3,"57":2}}],["case",{"2":{"1":1,"11":1,"14":1,"55":1,"57":1}}],["type",{"2":{"55":1}}],["tuple",{"2":{"55":1}}],["tcp",{"2":{"50":2}}],["tied",{"2":{"59":1}}],["tightly",{"2":{"59":1}}],["tick",{"2":{"49":1,"57":4}}],["timers",{"2":{"59":1}}],["timeouts",{"2":{"59":1}}],["timeout",{"0":{"30":1},"2":{"3":1,"30":3,"31":4,"59":1}}],["time",{"2":{"1":1,"45":2,"57":1}}],["tests",{"2":{"64":1}}],["testing",{"2":{"45":3}}],["term",{"2":{"37":2}}],["takes",{"2":{"47":1,"55":1}}],["task",{"0":{"56":1},"2":{"45":2,"47":14,"49":3,"50":1,"51":4,"54":1,"55":6,"56":5}}],["tasks",{"0":{"55":1},"2":{"5":1,"44":1,"49":1,"53":1,"57":8,"58":1}}],["target",{"2":{"36":2}}],["true",{"2":{"50":1}}],["translated",{"2":{"17":1}}],["translationstate",{"2":{"17":1}}],["translation",{"2":{"17":1}}],["trying",{"2":{"47":1}}],["try",{"2":{"2":1,"3":2,"4":3,"8":1,"10":1,"11":1,"45":7,"47":1,"50":18,"54":1,"55":2,"57":5,"58":3}}],["tty",{"2":{"17":2}}],["two",{"2":{"9":1}}],["tobytes",{"2":{"50":2}}],["to",{"2":{"3":2,"4":4,"5":3,"10":3,"11":3,"13":2,"14":4,"15":1,"17":1,"27":1,"31":2,"33":2,"34":1,"35":1,"36":2,"37":1,"41":1,"44":4,"47":7,"49":4,"50":2,"51":3,"53":2,"55":2,"56":3,"57":5,"60":1,"65":1}}],["third",{"2":{"55":1}}],["this",{"2":{"4":1,"5":3,"10":1,"13":2,"14":1,"42":1,"49":1,"53":1,"65":1}}],["thread",{"2":{"44":1}}],["threadpool",{"2":{"44":1,"45":3}}],["that",{"2":{"2":1,"4":2,"14":3,"44":2,"47":2,"50":2,"53":1,"57":1}}],["them",{"2":{"57":1}}],["their",{"2":{"57":1}}],["they",{"2":{"57":1}}],["these",{"2":{"14":1}}],["there",{"2":{"8":1,"10":1,"14":1,"40":1,"41":1,"57":1}}],["then",{"2":{"5":1,"14":1,"17":1,"31":2,"47":1,"49":1,"50":1,"51":1}}],["the",{"0":{"63":1},"2":{"1":2,"2":3,"3":4,"4":9,"5":5,"7":2,"8":3,"10":6,"11":5,"13":6,"14":7,"15":1,"16":2,"17":3,"18":2,"19":2,"27":2,"30":3,"31":7,"35":3,"36":1,"40":2,"41":2,"44":1,"45":1,"47":16,"49":11,"50":7,"51":2,"53":3,"54":2,"55":14,"56":4,"57":10,"60":2,"63":1,"64":2,"65":1}}],["t",{"2":{"1":1,"10":1,"13":1,"20":3,"21":2,"22":1,"23":1,"24":1,"25":1,"26":1,"38":1,"39":1,"47":1,"50":4}}],["x27",{"2":{"1":1,"8":1,"10":1,"13":1,"44":1,"47":2,"50":2,"51":1,"65":1}}],["osaiocorolinuxio",{"2":{"60":1}}],["overview",{"0":{"58":1},"1":{"59":1,"60":1}}],["ok",{"2":{"50":1}}],["other",{"2":{"49":1}}],["old",{"2":{"33":4}}],["outside",{"2":{"50":1}}],["out",{"2":{"5":1,"10":1,"11":6,"14":4,"17":2,"18":2,"19":2,"20":1,"22":1,"23":1,"24":1,"27":2,"37":1,"38":1,"50":6,"51":1,"58":2}}],["occured",{"2":{"4":1,"11":1}}],["once",{"2":{"30":1,"50":1}}],["on",{"2":{"17":1,"35":1,"44":1,"49":1}}],["onto",{"2":{"16":1}}],["one",{"2":{"4":1,"49":1,"55":1,"57":2}}],["only",{"2":{"2":1,"56":1}}],["ops",{"2":{"50":1}}],["option",{"2":{"57":1}}],["optional",{"2":{"54":1,"55":1}}],["options",{"2":{"50":2}}],["optimized",{"2":{"5":1}}],["operating",{"2":{"35":1}}],["operation",{"0":{"8":1},"2":{"3":1,"4":2,"5":2,"8":3,"10":7,"11":1,"13":6,"14":6,"30":1,"31":5,"32":1,"49":1,"51":2,"55":1}}],["operations",{"0":{"3":1,"4":1,"9":1,"13":1,"50":1},"1":{"10":1,"11":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1},"2":{"1":1,"2":3,"3":3,"4":5,"5":1,"9":1,"10":3,"11":2,"13":4,"14":2,"49":3,"50":1,"51":1,"57":2,"59":1}}],["openfile",{"2":{"58":2}}],["openflags",{"2":{"27":1}}],["opened",{"2":{"27":1}}],["opening",{"2":{"27":1}}],["opens",{"2":{"27":1}}],["openat",{"0":{"27":1}}],["op",{"2":{"3":4,"10":2,"11":2,"50":7,"58":2}}],["or",{"2":{"3":1,"4":1,"14":1,"31":1,"34":1,"40":1,"41":1,"45":1,"51":1,"55":2,"57":1}}],["offset",{"2":{"18":2,"19":2}}],["of",{"2":{"1":2,"3":1,"4":3,"8":1,"10":2,"11":4,"13":1,"14":2,"16":1,"17":1,"18":1,"19":2,"35":1,"44":1,"47":3,"50":1,"51":1,"53":2,"55":3,"56":1,"57":1}}],["ignore",{"2":{"56":1}}],["i",{"2":{"50":2}}],["ipproto",{"2":{"38":1,"50":2}}],["i128",{"2":{"30":1,"31":1}}],["ident",{"2":{"15":1}}],["id",{"2":{"5":4,"14":5,"32":3,"37":1}}],["imperative",{"2":{"53":1}}],["import",{"2":{"50":3,"58":2,"65":3}}],["implementation",{"2":{"11":1}}],["implement",{"2":{"5":1}}],["immediately",{"2":{"4":2,"10":1,"14":1,"55":1,"57":1}}],["immediate",{"0":{"7":1},"1":{"8":1,"9":1,"10":1,"11":1},"2":{"3":1,"7":1,"58":1}}],["if",{"2":{"3":1,"4":2,"5":2,"8":2,"10":2,"11":3,"14":3,"17":1,"31":2,"47":1,"50":3,"57":1}}],["is",{"2":{"3":2,"4":1,"5":5,"10":1,"11":1,"14":3,"17":2,"18":1,"19":1,"27":2,"40":4,"41":4,"42":1,"44":1,"47":6,"49":1,"50":5,"55":2,"56":1,"60":3,"64":1}}],["isn",{"2":{"1":1,"47":1}}],["its",{"2":{"37":1,"51":1}}],["it",{"2":{"3":1,"4":1,"5":1,"8":1,"11":1,"14":1,"44":3,"49":1,"51":1,"54":1,"60":1,"65":1}}],["info",{"2":{"58":3}}],["indexof",{"2":{"50":1}}],["indicate",{"2":{"47":1}}],["inet",{"2":{"50":2}}],["inside",{"2":{"49":2}}],["instead",{"2":{"11":1,"50":1}}],["instance",{"0":{"2":1,"54":1},"2":{"2":2,"4":1,"5":1,"49":1}}],["incremented",{"2":{"40":1,"41":1}}],["inout",{"2":{"20":1}}],["input",{"2":{"17":1}}],["int",{"2":{"50":2}}],["integrating",{"0":{"61":1},"1":{"62":1,"63":1,"64":1,"65":1}}],["integer",{"2":{"47":1}}],["internal",{"2":{"40":1,"41":1,"49":1}}],["interpreted",{"2":{"14":1}}],["into",{"2":{"5":1,"13":1,"14":2,"17":1,"18":1,"19":1,"27":1,"33":1,"49":1,"59":1}}],["initoptions",{"2":{"54":1}}],["initip4",{"2":{"50":2}}],["initializing",{"0":{"2":1,"54":1}}],["init",{"2":{"2":3,"45":2,"50":2,"54":1}}],["in",{"0":{"64":1,"65":1},"2":{"1":1,"2":2,"4":1,"5":1,"7":1,"10":1,"11":2,"13":2,"14":3,"17":1,"18":1,"19":1,"34":1,"44":1,"49":1,"51":1,"53":1,"55":2,"57":1,"63":1,"64":1}}],["iocp",{"2":{"60":1}}],["io",{"0":{"1":1,"7":1,"49":1,"50":1},"1":{"2":1,"3":1,"4":1,"5":1,"8":1,"9":1,"10":1,"11":1,"50":1,"51":1},"2":{"1":1,"5":1,"7":1,"9":1,"13":1,"49":8,"50":12,"53":1,"55":2,"57":4,"58":2,"59":2,"60":2}}],["addimport",{"2":{"64":2}}],["add",{"2":{"64":1}}],["addrlen",{"2":{"20":1,"21":1,"50":1}}],["addr",{"2":{"20":1,"21":1,"50":1}}],["address",{"2":{"14":3,"50":8}}],["aarch64wasiposix❌",{"2":{"60":1}}],["aarch64windowsiocpx86",{"2":{"60":1}}],["aarch64",{"2":{"60":1}}],["aarch64darwinposixx86",{"2":{"60":1}}],["above",{"2":{"45":1}}],["af",{"2":{"38":1,"50":2}}],["after",{"2":{"14":1,"56":1}}],["actively",{"2":{"51":1,"57":2}}],["actually",{"2":{"3":1}}],["accept",{"0":{"20":1},"2":{"20":1,"50":1}}],["application",{"2":{"14":1,"47":1}}],["api",{"0":{"0":1,"6":1,"12":1,"43":1,"46":1,"48":1,"52":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"7":1,"8":1,"9":1,"10":1,"11":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"44":1,"45":1,"47":1,"49":1,"50":1,"51":1,"53":1,"54":1,"55":1,"56":1,"57":1},"2":{"1":1,"3":1,"50":2,"58":1,"59":2,"60":1,"64":1}}],["args",{"2":{"55":2}}],["argument",{"2":{"47":1}}],["arguments",{"2":{"13":1,"55":1}}],["are",{"2":{"4":1,"13":2,"49":1,"50":1,"57":1}}],["asynchronous",{"2":{"58":1,"59":1}}],["as",{"2":{"11":1,"40":1,"41":1,"42":1,"45":1,"47":2,"50":2,"51":1,"53":1,"55":1}}],["amp",{"2":{"10":2,"11":4,"45":2,"50":16,"58":4}}],["amount",{"2":{"1":1,"17":1,"18":1,"19":1}}],["aka",{"2":{"5":1}}],["also",{"2":{"60":1}}],["alternatively",{"2":{"45":1,"51":1}}],["allows",{"2":{"49":1}}],["allowing",{"2":{"49":1}}],["allow",{"2":{"44":1}}],["allocated",{"2":{"55":1}}],["allocates",{"2":{"2":1}}],["allocator",{"2":{"2":4,"45":2,"50":1,"54":3}}],["all",{"2":{"4":2,"13":1,"49":3,"57":2,"60":1}}],["always",{"2":{"4":1,"45":1}}],["at",{"2":{"4":2,"35":1,"36":1,"50":1,"57":1}}],["atomic",{"2":{"3":1,"59":1}}],["any",{"2":{"4":1,"10":1,"11":1,"14":1,"50":2}}],["and",{"0":{"63":1},"2":{"2":2,"4":2,"10":1,"13":1,"37":1,"47":1,"49":1,"51":1,"53":1,"54":3,"55":1,"56":2,"57":2,"58":1,"59":2}}],["an",{"2":{"2":1,"47":1,"54":1}}],["a",{"0":{"8":1,"56":1},"2":{"2":1,"8":1,"10":1,"13":1,"14":1,"16":1,"17":3,"18":3,"19":1,"27":1,"28":1,"29":1,"30":2,"31":1,"33":1,"34":1,"36":1,"37":1,"39":1,"40":3,"41":3,"42":1,"44":1,"47":6,"49":4,"50":2,"51":2,"53":3,"55":5,"56":2,"57":1,"59":1}}],["ahead",{"2":{"1":1}}],["aio",{"0":{"0":1,"6":1,"12":1,"61":1,"63":1,"64":1,"65":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"7":1,"8":1,"9":1,"10":1,"11":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"62":1,"63":1,"64":1,"65":1},"2":{"3":4,"4":1,"5":5,"7":2,"8":1,"9":1,"10":3,"11":5,"40":2,"41":2,"42":1,"49":1,"50":12,"51":1,"58":7,"60":1,"63":1,"64":8,"65":2}}]],"serializationVersion":2}
